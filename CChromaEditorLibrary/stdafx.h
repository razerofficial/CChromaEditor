// stdafx.h : include file for standard system include files,
// or project specific include files that are used frequently, but
// are changed infrequently

#pragma once

//#define USE_CHROMA_CLOUD

#ifndef VC_EXTRALEAN
#define VC_EXTRALEAN            // Exclude rarely-used stuff from Windows headers
#endif

#include "targetver.h"

#define _ATL_CSTRING_EXPLICIT_CONSTRUCTORS      // some CString constructors will be explicit

#include <afxwin.h>         // MFC core and standard components
#include <afxext.h>         // MFC extensions

#ifndef _AFX_NO_OLE_SUPPORT
#include <afxole.h>         // MFC OLE classes
#include <afxodlgs.h>       // MFC OLE dialog classes
#include <afxdisp.h>        // MFC Automation classes
#endif // _AFX_NO_OLE_SUPPORT

#ifndef _AFX_NO_DB_SUPPORT
#include <afxdb.h>                      // MFC ODBC database classes
#endif // _AFX_NO_DB_SUPPORT

#ifndef _AFX_NO_DAO_SUPPORT
#include <afxdao.h>                     // MFC DAO database classes
#endif // _AFX_NO_DAO_SUPPORT

#ifndef _AFX_NO_OLE_SUPPORT
#include <afxdtctl.h>           // MFC support for Internet Explorer 4 Common Controls
#endif
#ifndef _AFX_NO_AFXCMN_SUPPORT
#include <afxcmn.h>                     // MFC support for Windows Common Controls
#endif // _AFX_NO_AFXCMN_SUPPORT

#if _MSC_VER // this is defined when compiling with Visual Studio
#define EXPORT_API __declspec(dllexport) // Visual Studio needs annotating exported functions with this
#else
#define EXPORT_API // XCode does not need annotating exported functions, so define is empty
#endif

/* Setup log mechanism */
typedef void(*DebugLogPtr)(const char *);
void LogDebug(const char* text, ...);
void LogError(const char* text, ...);
/* End of setup log mechanism */

#include "AnimationBase.h"

inline int fastrand();

extern "C"
{
	//GameMaker: Only has double and char* types, which explains the D suffix on duplicate methods

	int PluginGetAnimationIdFromInstance(ChromaSDK::AnimationBase* animation);
	int GetAnimationIdFromInstance(ChromaSDK::AnimationBase* animation);
	ChromaSDK::AnimationBase* GetAnimationInstance(int animationId);
	ChromaSDK::AnimationBase* GetAnimationInstanceName(const char* path);
	ChromaSDK::AnimationBase* GetAnimationInstanceIfOpenName(const char* path);

#pragma region Source of autogenerated APIs and documentation
	/*
		Return the sum of colors
	*/
	EXPORT_API int PluginAddColor(const int color1, const int color2);
	/*
		Adds a frame to the `Chroma` animation and sets the `duration` (in seconds).
		The `color` is expected to be an array of the dimensions for the `deviceType/device`.
		The `length` parameter is the size of the `color` array. For `EChromaSDKDevice1DEnum`
		the array size should be `MAX LEDS`. For `EChromaSDKDevice2DEnum` the array
		size should be `MAX ROW` times `MAX COLUMN`. Returns the animation id upon
		success. Returns negative one upon failure.
	*/
	EXPORT_API int PluginAddFrame(int animationId, float duration, int* colors, int length);
	/*
		Add source color to target where color is not black for frame id, reference
		source and target by id.
	*/
	EXPORT_API void PluginAddNonZeroAllKeys(int sourceAnimationId, int targetAnimationId, int frameId);
	/*
		Add source color to target where color is not black for all frames, reference
		source and target by id.
	*/
	EXPORT_API void PluginAddNonZeroAllKeysAllFrames(int sourceAnimationId, int targetAnimationId);
	/*
		Add source color to target where color is not black for all frames, reference
		source and target by name.
	*/
	EXPORT_API void PluginAddNonZeroAllKeysAllFramesName(const char* sourceAnimation, const char* targetAnimation);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginAddNonZeroAllKeysAllFramesNameD(const char* sourceAnimation, const char* targetAnimation);
	/*
		Add source color to target where color is not black for all frames starting
		at offset for the length of the source, reference source and target by
		id.
	*/
	EXPORT_API void PluginAddNonZeroAllKeysAllFramesOffset(int sourceAnimationId, int targetAnimationId, int offset);
	/*
		Add source color to target where color is not black for all frames starting
		at offset for the length of the source, reference source and target by
		name.
	*/
	EXPORT_API void PluginAddNonZeroAllKeysAllFramesOffsetName(const char* sourceAnimation, const char* targetAnimation, int offset);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginAddNonZeroAllKeysAllFramesOffsetNameD(const char* sourceAnimation, const char* targetAnimation, double offset);
	/*
		Add source color to target where color is not black for frame id, reference
		source and target by name.
	*/
	EXPORT_API void PluginAddNonZeroAllKeysName(const char* sourceAnimation, const char* targetAnimation, int frameId);
	/*
		Add source color to target where color is not black for the source frame
		and target offset frame, reference source and target by id.
	*/
	EXPORT_API void PluginAddNonZeroAllKeysOffset(int sourceAnimationId, int targetAnimationId, int frameId, int offset);
	/*
		Add source color to target where color is not black for the source frame
		and target offset frame, reference source and target by name.
	*/
	EXPORT_API void PluginAddNonZeroAllKeysOffsetName(const char* sourceAnimation, const char* targetAnimation, int frameId, int offset);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginAddNonZeroAllKeysOffsetNameD(const char* sourceAnimation, const char* targetAnimation, double frameId, double offset);
	/*
		Add source color to target where the target color is not black for all frames,
		reference source and target by id.
	*/
	EXPORT_API void PluginAddNonZeroTargetAllKeysAllFrames(int sourceAnimationId, int targetAnimationId);
	/*
		Add source color to target where the target color is not black for all frames,
		reference source and target by name.
	*/
	EXPORT_API void PluginAddNonZeroTargetAllKeysAllFramesName(const char* sourceAnimation, const char* targetAnimation);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginAddNonZeroTargetAllKeysAllFramesNameD(const char* sourceAnimation, const char* targetAnimation);
	/*
		Add source color to target where the target color is not black for all frames
		starting at offset for the length of the source, reference source and target
		by id.
	*/
	EXPORT_API void PluginAddNonZeroTargetAllKeysAllFramesOffset(int sourceAnimationId, int targetAnimationId, int offset);
	/*
		Add source color to target where the target color is not black for all frames
		starting at offset for the length of the source, reference source and target
		by name.
	*/
	EXPORT_API void PluginAddNonZeroTargetAllKeysAllFramesOffsetName(const char* sourceAnimation, const char* targetAnimation, int offset);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginAddNonZeroTargetAllKeysAllFramesOffsetNameD(const char* sourceAnimation, const char* targetAnimation, double offset);
	/*
		Add source color to target where target color is not blank from the source
		frame to the target offset frame, reference source and target by id.
	*/
	EXPORT_API void PluginAddNonZeroTargetAllKeysOffset(int sourceAnimationId, int targetAnimationId, int frameId, int offset);
	/*
		Add source color to target where target color is not blank from the source
		frame to the target offset frame, reference source and target by name.
	*/
	EXPORT_API void PluginAddNonZeroTargetAllKeysOffsetName(const char* sourceAnimation, const char* targetAnimation, int frameId, int offset);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginAddNonZeroTargetAllKeysOffsetNameD(const char* sourceAnimation, const char* targetAnimation, double frameId, double offset);
	/*
		Append all source frames to the target animation, reference source and target
		by id.
	*/
	EXPORT_API void PluginAppendAllFrames(int sourceAnimationId, int targetAnimationId);
	/*
		Append all source frames to the target animation, reference source and target
		by name.
	*/
	EXPORT_API void PluginAppendAllFramesName(const char* sourceAnimation, const char* targetAnimation);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginAppendAllFramesNameD(const char* sourceAnimation, const char* targetAnimation);
	/*
		`PluginClearAll` will issue a `CLEAR` effect for all devices.
	*/
	EXPORT_API void PluginClearAll();
	/*
		`PluginClearAnimationType` will issue a `CLEAR` effect for the given device.
	*/
	EXPORT_API void PluginClearAnimationType(int deviceType, int device);
	/*
		`PluginCloseAll` closes all open animations so they can be reloaded from
		disk. The set of animations will be stopped if playing.
	*/
	EXPORT_API void PluginCloseAll();
	/*
		Closes the `Chroma` animation to free up resources referenced by id. Returns
		the animation id upon success. Returns negative one upon failure. This
		might be used while authoring effects if there was a change necessitating
		re-opening the animation. The animation id can no longer be used once closed.
	*/
	EXPORT_API int PluginCloseAnimation(int animationId);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginCloseAnimationD(double animationId);
	/*
		Closes the `Chroma` animation referenced by name so that the animation can
		be reloaded from disk.
	*/
	EXPORT_API void PluginCloseAnimationName(const char* path);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginCloseAnimationNameD(const char* path);
	/*
		`PluginCloseComposite` closes a set of animations so they can be reloaded
		from disk. The set of animations will be stopped if playing.
	*/
	EXPORT_API void PluginCloseComposite(const char* name);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginCloseCompositeD(const char* name);
	/*
		Copy source animation to target animation for the given frame. Source and
		target are referenced by id.
	*/
	EXPORT_API void PluginCopyAllKeys(int sourceAnimationId, int targetAnimationId, int frameId);
	/*
		Copy source animation to target animation for the given frame. Source and
		target are referenced by id.
	*/
	EXPORT_API void PluginCopyAllKeysName(const char* sourceAnimation, const char* targetAnimation, int frameId);
	/*
		Copy animation to named target animation in memory. If target animation
		exists, close first. Source is referenced by id.
	*/
	EXPORT_API int PluginCopyAnimation(int sourceAnimationId, const char* targetAnimation);
	/*
		Copy animation to named target animation in memory. If target animation
		exists, close first. Source is referenced by name.
	*/
	EXPORT_API void PluginCopyAnimationName(const char* sourceAnimation, const char* targetAnimation);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginCopyAnimationNameD(const char* sourceAnimation, const char* targetAnimation);
	/*
		Copy blue channel to other channels for all frames. Intensity range is 0.0
		to 1.0. Reference the animation by id.
	*/
	EXPORT_API void PluginCopyBlueChannelAllFrames(int animationId, float redIntensity, float greenIntensity);
	/*
		Copy blue channel to other channels for all frames. Intensity range is 0.0
		to 1.0. Reference the animation by name.
	*/
	EXPORT_API void PluginCopyBlueChannelAllFramesName(const char* path, float redIntensity, float greenIntensity);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginCopyBlueChannelAllFramesNameD(const char* path, double redIntensity, double greenIntensity);
	/*
		Copy green channel to other channels for all frames. Intensity range is
		0.0 to 1.0. Reference the animation by id.
	*/
	EXPORT_API void PluginCopyGreenChannelAllFrames(int animationId, float redIntensity, float blueIntensity);
	/*
		Copy green channel to other channels for all frames. Intensity range is
		0.0 to 1.0. Reference the animation by name.
	*/
	EXPORT_API void PluginCopyGreenChannelAllFramesName(const char* path, float redIntensity, float blueIntensity);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginCopyGreenChannelAllFramesNameD(const char* path, double redIntensity, double blueIntensity);
	/*
		Copy animation key color from the source animation to the target animation
		for the given frame. Reference the source and target by id.
	*/
	EXPORT_API void PluginCopyKeyColor(int sourceAnimationId, int targetAnimationId, int frameId, int rzkey);
	/*
		Copy animation key color from the source animation to the target animation
		for all frames. Reference the source and target by id.
	*/
	EXPORT_API void PluginCopyKeyColorAllFrames(int sourceAnimationId, int targetAnimationId, int rzkey);
	/*
		Copy animation key color from the source animation to the target animation
		for all frames. Reference the source and target by name.
	*/
	EXPORT_API void PluginCopyKeyColorAllFramesName(const char* sourceAnimation, const char* targetAnimation, int rzkey);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginCopyKeyColorAllFramesNameD(const char* sourceAnimation, const char* targetAnimation, double rzkey);
	/*
		Copy animation key color from the source animation to the target animation
		for all frames, starting at the offset for the length of the source animation.
		Source and target are referenced by id.
	*/
	EXPORT_API void PluginCopyKeyColorAllFramesOffset(int sourceAnimationId, int targetAnimationId, int rzkey, int offset);
	/*
		Copy animation key color from the source animation to the target animation
		for all frames, starting at the offset for the length of the source animation.
		Source and target are referenced by name.
	*/
	EXPORT_API void PluginCopyKeyColorAllFramesOffsetName(const char* sourceAnimation, const char* targetAnimation, int rzkey, int offset);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginCopyKeyColorAllFramesOffsetNameD(const char* sourceAnimation, const char* targetAnimation, double rzkey, double offset);
	/*
		Copy animation key color from the source animation to the target animation
		for the given frame.
	*/
	EXPORT_API void PluginCopyKeyColorName(const char* sourceAnimation, const char* targetAnimation, int frameId, int rzkey);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginCopyKeyColorNameD(const char* sourceAnimation, const char* targetAnimation, double frameId, double rzkey);
	/*
		Copy animation color for a set of keys from the source animation to the
		target animation for the given frame. Reference the source and target by
		id.
	*/
	EXPORT_API void PluginCopyKeysColor(int sourceAnimationId, int targetAnimationId, int frameId, const int* keys, int size);
	/*
		Copy animation color for a set of keys from the source animation to the
		target animation for all frames. Reference the source and target by id.
	*/
	EXPORT_API void PluginCopyKeysColorAllFrames(int sourceAnimationId, int targetAnimationId, const int* keys, int size);
	/*
		Copy animation color for a set of keys from the source animation to the
		target animation for all frames. Reference the source and target by name.
	*/
	EXPORT_API void PluginCopyKeysColorAllFramesName(const char* sourceAnimation, const char* targetAnimation, const int* keys, int size);
	/*
		Copy animation color for a set of keys from the source animation to the
		target animation for the given frame. Reference the source and target by
		name.
	*/
	EXPORT_API void PluginCopyKeysColorName(const char* sourceAnimation, const char* targetAnimation, int frameId, const int* keys, int size);
	/*
		Copy animation color for a set of keys from the source animation to the
		target animation from the source frame to the target frame. Reference the
		source and target by id.
	*/
	EXPORT_API void PluginCopyKeysColorOffset(int sourceAnimationId, int targetAnimationId, int sourceFrameId, int targetFrameId, const int* keys, int size);
	/*
		Copy animation color for a set of keys from the source animation to the
		target animation from the source frame to the target frame. Reference the
		source and target by name.
	*/
	EXPORT_API void PluginCopyKeysColorOffsetName(const char* sourceAnimation, const char* targetAnimation, int sourceFrameId, int targetFrameId, const int* keys, int size);
	/*
		Copy source animation to target animation for the given frame. Source and
		target are referenced by id.
	*/
	EXPORT_API void PluginCopyNonZeroAllKeys(int sourceAnimationId, int targetAnimationId, int frameId);
	/*
		Copy nonzero colors from a source animation to a target animation for all
		frames. Reference source and target by id.
	*/
	EXPORT_API void PluginCopyNonZeroAllKeysAllFrames(int sourceAnimationId, int targetAnimationId);
	/*
		Copy nonzero colors from a source animation to a target animation for all
		frames. Reference source and target by name.
	*/
	EXPORT_API void PluginCopyNonZeroAllKeysAllFramesName(const char* sourceAnimation, const char* targetAnimation);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginCopyNonZeroAllKeysAllFramesNameD(const char* sourceAnimation, const char* targetAnimation);
	/*
		Copy nonzero colors from a source animation to a target animation for all
		frames starting at the offset for the length of the source animation. The
		source and target are referenced by id.
	*/
	EXPORT_API void PluginCopyNonZeroAllKeysAllFramesOffset(int sourceAnimationId, int targetAnimationId, int offset);
	/*
		Copy nonzero colors from a source animation to a target animation for all
		frames starting at the offset for the length of the source animation. The
		source and target are referenced by name.
	*/
	EXPORT_API void PluginCopyNonZeroAllKeysAllFramesOffsetName(const char* sourceAnimation, const char* targetAnimation, int offset);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginCopyNonZeroAllKeysAllFramesOffsetNameD(const char* sourceAnimation, const char* targetAnimation, double offset);
	/*
		Copy nonzero colors from source animation to target animation for the specified
		frame. Source and target are referenced by id.
	*/
	EXPORT_API void PluginCopyNonZeroAllKeysName(const char* sourceAnimation, const char* targetAnimation, int frameId);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginCopyNonZeroAllKeysNameD(const char* sourceAnimation, const char* targetAnimation, double frameId);
	/*
		Copy nonzero colors from the source animation to the target animation from
		the source frame to the target offset frame. Source and target are referenced
		by id.
	*/
	EXPORT_API void PluginCopyNonZeroAllKeysOffset(int sourceAnimationId, int targetAnimationId, int frameId, int offset);
	/*
		Copy nonzero colors from the source animation to the target animation from
		the source frame to the target offset frame. Source and target are referenced
		by name.
	*/
	EXPORT_API void PluginCopyNonZeroAllKeysOffsetName(const char* sourceAnimation, const char* targetAnimation, int frameId, int offset);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginCopyNonZeroAllKeysOffsetNameD(const char* sourceAnimation, const char* targetAnimation, double frameId, double offset);
	/*
		Copy animation key color from the source animation to the target animation
		for the given frame where color is not zero.
	*/
	EXPORT_API void PluginCopyNonZeroKeyColor(int sourceAnimationId, int targetAnimationId, int frameId, int rzkey);
	/*
		Copy animation key color from the source animation to the target animation
		for the given frame where color is not zero.
	*/
	EXPORT_API void PluginCopyNonZeroKeyColorName(const char* sourceAnimation, const char* targetAnimation, int frameId, int rzkey);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginCopyNonZeroKeyColorNameD(const char* sourceAnimation, const char* targetAnimation, double frameId, double rzkey);
	/*
		Copy nonzero colors from the source animation to the target animation where
		the target color is nonzero for the specified frame. Source and target
		are referenced by id.
	*/
	EXPORT_API void PluginCopyNonZeroTargetAllKeys(int sourceAnimationId, int targetAnimationId, int frameId);
	/*
		Copy nonzero colors from the source animation to the target animation where
		the target color is nonzero for all frames. Source and target are referenced
		by id.
	*/
	EXPORT_API void PluginCopyNonZeroTargetAllKeysAllFrames(int sourceAnimationId, int targetAnimationId);
	/*
		Copy nonzero colors from the source animation to the target animation where
		the target color is nonzero for all frames. Source and target are referenced
		by name.
	*/
	EXPORT_API void PluginCopyNonZeroTargetAllKeysAllFramesName(const char* sourceAnimation, const char* targetAnimation);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginCopyNonZeroTargetAllKeysAllFramesNameD(const char* sourceAnimation, const char* targetAnimation);
	/*
		Copy nonzero colors from the source animation to the target animation where
		the target color is nonzero for all frames. Source and target are referenced
		by name.
	*/
	EXPORT_API void PluginCopyNonZeroTargetAllKeysAllFramesOffset(int sourceAnimationId, int targetAnimationId, int offset);
	/*
		Copy nonzero colors from the source animation to the target animation where
		the target color is nonzero for all frames starting at the target offset
		for the length of the source animation. Source and target animations are
		referenced by name.
	*/
	EXPORT_API void PluginCopyNonZeroTargetAllKeysAllFramesOffsetName(const char* sourceAnimation, const char* targetAnimation, int offset);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginCopyNonZeroTargetAllKeysAllFramesOffsetNameD(const char* sourceAnimation, const char* targetAnimation, double offset);
	/*
		Copy nonzero colors from the source animation to the target animation where
		the target color is nonzero for the specified frame. The source and target
		are referenced by name.
	*/
	EXPORT_API void PluginCopyNonZeroTargetAllKeysName(const char* sourceAnimation, const char* targetAnimation, int frameId);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginCopyNonZeroTargetAllKeysNameD(const char* sourceAnimation, const char* targetAnimation, double frameId);
	/*
		Copy nonzero colors from the source animation to the target animation where
		the target color is nonzero for the specified source frame and target offset
		frame. The source and target are referenced by id.
	*/
	EXPORT_API void PluginCopyNonZeroTargetAllKeysOffset(int sourceAnimationId, int targetAnimationId, int frameId, int offset);
	/*
		Copy nonzero colors from the source animation to the target animation where
		the target color is nonzero for the specified source frame and target offset
		frame. The source and target are referenced by name.
	*/
	EXPORT_API void PluginCopyNonZeroTargetAllKeysOffsetName(const char* sourceAnimation, const char* targetAnimation, int frameId, int offset);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginCopyNonZeroTargetAllKeysOffsetNameD(const char* sourceAnimation, const char* targetAnimation, double frameId, double offset);
	/*
		Copy nonzero colors from the source animation to the target animation where
		the target color is zero for all frames. Source and target are referenced
		by id.
	*/
	EXPORT_API void PluginCopyNonZeroTargetZeroAllKeysAllFrames(int sourceAnimationId, int targetAnimationId);
	/*
		Copy nonzero colors from the source animation to the target animation where
		the target color is zero for all frames. Source and target are referenced
		by name.
	*/
	EXPORT_API void PluginCopyNonZeroTargetZeroAllKeysAllFramesName(const char* sourceAnimation, const char* targetAnimation);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginCopyNonZeroTargetZeroAllKeysAllFramesNameD(const char* sourceAnimation, const char* targetAnimation);
	/*
		Copy red channel to other channels for all frames. Intensity range is 0.0
		to 1.0. Reference the animation by id.
	*/
	EXPORT_API void PluginCopyRedChannelAllFrames(int animationId, float greenIntensity, float blueIntensity);
	/*
		Copy green channel to other channels for all frames. Intensity range is
		0.0 to 1.0. Reference the animation by name.
	*/
	EXPORT_API void PluginCopyRedChannelAllFramesName(const char* path, float greenIntensity, float blueIntensity);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginCopyRedChannelAllFramesNameD(const char* path, double greenIntensity, double blueIntensity);
	/*
		Copy zero colors from source animation to target animation for the frame.
		Source and target are referenced by id.
	*/
	EXPORT_API void PluginCopyZeroAllKeys(int sourceAnimationId, int targetAnimationId, int frameId);
	/*
		Copy zero colors from source animation to target animation for all frames.
		Source and target are referenced by id.
	*/
	EXPORT_API void PluginCopyZeroAllKeysAllFrames(int sourceAnimationId, int targetAnimationId);
	/*
		Copy zero colors from source animation to target animation for all frames.
		Source and target are referenced by name.
	*/
	EXPORT_API void PluginCopyZeroAllKeysAllFramesName(const char* sourceAnimation, const char* targetAnimation);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginCopyZeroAllKeysAllFramesNameD(const char* sourceAnimation, const char* targetAnimation);
	/*
		Copy zero colors from source animation to target animation for all frames
		starting at the target offset for the length of the source animation. Source
		and target are referenced by id.
	*/
	EXPORT_API void PluginCopyZeroAllKeysAllFramesOffset(int sourceAnimationId, int targetAnimationId, int offset);
	/*
		Copy zero colors from source animation to target animation for all frames
		starting at the target offset for the length of the source animation. Source
		and target are referenced by name.
	*/
	EXPORT_API void PluginCopyZeroAllKeysAllFramesOffsetName(const char* sourceAnimation, const char* targetAnimation, int offset);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginCopyZeroAllKeysAllFramesOffsetNameD(const char* sourceAnimation, const char* targetAnimation, double offset);
	/*
		Copy zero colors from source animation to target animation for the frame.
		Source and target are referenced by name.
	*/
	EXPORT_API void PluginCopyZeroAllKeysName(const char* sourceAnimation, const char* targetAnimation, int frameId);
	/*
		Copy zero colors from source animation to target animation for the frame
		id starting at the target offset for the length of the source animation.
		Source and target are referenced by id.
	*/
	EXPORT_API void PluginCopyZeroAllKeysOffset(int sourceAnimationId, int targetAnimationId, int frameId, int offset);
	/*
		Copy zero colors from source animation to target animation for the frame
		id starting at the target offset for the length of the source animation.
		Source and target are referenced by name.
	*/
	EXPORT_API void PluginCopyZeroAllKeysOffsetName(const char* sourceAnimation, const char* targetAnimation, int frameId, int offset);
	/*
		Copy zero key color from source animation to target animation for the specified
		frame. Source and target are referenced by id.
	*/
	EXPORT_API void PluginCopyZeroKeyColor(int sourceAnimationId, int targetAnimationId, int frameId, int rzkey);
	/*
		Copy zero key color from source animation to target animation for the specified
		frame. Source and target are referenced by name.
	*/
	EXPORT_API void PluginCopyZeroKeyColorName(const char* sourceAnimation, const char* targetAnimation, int frameId, int rzkey);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginCopyZeroKeyColorNameD(const char* sourceAnimation, const char* targetAnimation, double frameId, double rzkey);
	/*
		Copy nonzero color from source animation to target animation where target
		is zero for the frame. Source and target are referenced by id.
	*/
	EXPORT_API void PluginCopyZeroTargetAllKeys(int sourceAnimationId, int targetAnimationId, int frameId);
	/*
		Copy nonzero color from source animation to target animation where target
		is zero for all frames. Source and target are referenced by id.
	*/
	EXPORT_API void PluginCopyZeroTargetAllKeysAllFrames(int sourceAnimationId, int targetAnimationId);
	/*
		Copy nonzero color from source animation to target animation where target
		is zero for all frames. Source and target are referenced by name.
	*/
	EXPORT_API void PluginCopyZeroTargetAllKeysAllFramesName(const char* sourceAnimation, const char* targetAnimation);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginCopyZeroTargetAllKeysAllFramesNameD(const char* sourceAnimation, const char* targetAnimation);
	/*
		Copy nonzero color from source animation to target animation where target
		is zero for the frame. Source and target are referenced by name.
	*/
	EXPORT_API void PluginCopyZeroTargetAllKeysName(const char* sourceAnimation, const char* targetAnimation, int frameId);
	/*
		Direct access to low level API.
	*/
	EXPORT_API RZRESULT PluginCoreCreateChromaLinkEffect(ChromaSDK::ChromaLink::EFFECT_TYPE Effect, PRZPARAM pParam, RZEFFECTID* pEffectId);
	/*
		Direct access to low level API.
	*/
	EXPORT_API RZRESULT PluginCoreCreateEffect(RZDEVICEID DeviceId, ChromaSDK::EFFECT_TYPE Effect, PRZPARAM pParam, RZEFFECTID* pEffectId);
	/*
		Direct access to low level API.
	*/
	EXPORT_API RZRESULT PluginCoreCreateHeadsetEffect(ChromaSDK::Headset::EFFECT_TYPE Effect, PRZPARAM pParam, RZEFFECTID* pEffectId);
	/*
		Direct access to low level API.
	*/
	EXPORT_API RZRESULT PluginCoreCreateKeyboardEffect(ChromaSDK::Keyboard::EFFECT_TYPE Effect, PRZPARAM pParam, RZEFFECTID* pEffectId);
	/*
		Direct access to low level API.
	*/
	EXPORT_API RZRESULT PluginCoreCreateKeypadEffect(ChromaSDK::Keypad::EFFECT_TYPE Effect, PRZPARAM pParam, RZEFFECTID* pEffectId);
	/*
		Direct access to low level API.
	*/
	EXPORT_API RZRESULT PluginCoreCreateMouseEffect(ChromaSDK::Mouse::EFFECT_TYPE Effect, PRZPARAM pParam, RZEFFECTID* pEffectId);
	/*
		Direct access to low level API.
	*/
	EXPORT_API RZRESULT PluginCoreCreateMousepadEffect(ChromaSDK::Mousepad::EFFECT_TYPE Effect, PRZPARAM pParam, RZEFFECTID* pEffectId);
	/*
		Direct access to low level API.
	*/
	EXPORT_API RZRESULT PluginCoreDeleteEffect(RZEFFECTID EffectId);
	/*
		Direct access to low level API.
	*/
	EXPORT_API RZRESULT PluginCoreInit();
	/*
		Direct access to low level API.
	*/
	EXPORT_API RZRESULT PluginCoreInitSDK(ChromaSDK::APPINFOTYPE* AppInfo);
	/*
		Direct access to low level API.
	*/
	EXPORT_API RZRESULT PluginCoreIsActive(BOOL& Active);
	/*
		Direct access to low level API.
	*/
	EXPORT_API RZRESULT PluginCoreIsConnected(ChromaSDK::DEVICE_INFO_TYPE& DeviceInfo);
	/*
		Direct access to low level API.
	*/
	EXPORT_API RZRESULT PluginCoreQueryDevice(RZDEVICEID DeviceId, ChromaSDK::DEVICE_INFO_TYPE& DeviceInfo);
	/*
		Direct access to low level API.
	*/
	EXPORT_API RZRESULT PluginCoreSetEffect(RZEFFECTID EffectId);
	/*
		Direct access to low level API.
	*/
	EXPORT_API RZRESULT PluginCoreSetEventName(const wchar_t* Name);
	/*
		Begin broadcasting Chroma RGB data using the stored stream key as the endpoint.
		Intended for Cloud Gaming Platforms, restore the streaming key when the
		game instance is launched to continue streaming. streamId is a null terminated
		string streamKey is a null terminated string StreamGetStatus() should return
		the READY status to use this method.
	*/
	EXPORT_API bool PluginCoreStreamBroadcast(const char* streamId, const char* streamKey);
	/*
		End broadcasting Chroma RGB data. StreamGetStatus() should return the BROADCASTING
		status to use this method.
	*/
	EXPORT_API bool PluginCoreStreamBroadcastEnd();
	/*
		shortcode: Pass the address of a preallocated character buffer to get the
		streaming auth code. The buffer should have a minimum length of 6. length:
		Length will return as zero if the streaming auth code could not be obtained.
		If length is greater than zero, it will be the length of the returned streaming
		auth code. Once you have the shortcode, it should be shown to the user
		so they can associate the stream with their Razer ID StreamGetStatus()
		should return the READY status before invoking this method. platform: is
		the null terminated string that identifies the source of the stream: {
		GEFORCE_NOW, LUNA, STADIA, GAME_PASS } title: is the null terminated string
		that identifies the application or game.
	*/
	EXPORT_API void PluginCoreStreamGetAuthShortcode(char* shortcode, unsigned char* length, const wchar_t* platform, const wchar_t* title);
	/*
		focus: Pass the address of a preallocated character buffer to get the stream
		focus. The buffer should have a length of 48 length: Length will return
		as zero if the stream focus could not be obtained. If length is greater
		than zero, it will be the length of the returned stream focus.
	*/
	EXPORT_API bool PluginCoreStreamGetFocus(char* focus, unsigned char* length);
	/*
		Intended for Cloud Gaming Platforms, store the stream id to persist in user
		preferences to continue streaming if the game is suspended or closed. shortcode:
		The shortcode is a null terminated string. Use the shortcode that authorized
		the stream to obtain the stream id. streamId should be a preallocated buffer
		to get the stream key. The buffer should have a length of 48. length: Length
		will return zero if the key could not be obtained. If the length is greater
		than zero, it will be the length of the returned streaming id. Retrieve
		the stream id after authorizing the shortcode. The authorization window
		will expire in 5 minutes. Be sure to save the stream key before the window
		expires. StreamGetStatus() should return the READY status to use this method.
	*/
	EXPORT_API void PluginCoreStreamGetId(const char* shortcode, char* streamId, unsigned char* length);
	/*
		Intended for Cloud Gaming Platforms, store the streaming key to persist
		in user preferences to continue streaming if the game is suspended or closed.
		shortcode: The shortcode is a null terminated string. Use the shortcode
		that authorized the stream to obtain the stream key. If the status is in
		the BROADCASTING or WATCHING state, passing a NULL shortcode will return
		the active streamId. streamKey should be a preallocated buffer to get the
		stream key. The buffer should have a length of 48. length: Length will
		return zero if the key could not be obtained. If the length is greater
		than zero, it will be the length of the returned streaming key. Retrieve
		the stream key after authorizing the shortcode. The authorization window
		will expire in 5 minutes. Be sure to save the stream key before the window
		expires. StreamGetStatus() should return the READY status to use this method.
	*/
	EXPORT_API void PluginCoreStreamGetKey(const char* shortcode, char* streamKey, unsigned char* length);
	/*
		Returns StreamStatus, the current status of the service
	*/
	EXPORT_API ChromaSDK::Stream::StreamStatusType PluginCoreStreamGetStatus();
	/*
		Convert StreamStatusType to a printable string
	*/
	EXPORT_API const char* PluginCoreStreamGetStatusString(ChromaSDK::Stream::StreamStatusType status);
	/*
		This prevents the stream id and stream key from being obtained through the
		shortcode. This closes the auth window. shortcode is a null terminated
		string. StreamGetStatus() should return the READY status to use this method.
		returns success when shortcode has been released
	*/
	EXPORT_API bool PluginCoreStreamReleaseShortcode(const char* shortcode);
	/*
		The focus is a null terminated string. Set the focus identifer for the application
		designated to automatically change the streaming state. Returns true on
		success.
	*/
	EXPORT_API bool PluginCoreStreamSetFocus(const char* focus);
	/*
		Returns true if the Chroma streaming is supported. If false is returned,
		avoid calling stream methods.
	*/
	EXPORT_API bool PluginCoreStreamSupportsStreaming();
	/*
		Begin watching the Chroma RGB data using streamID parameter. streamId is
		a null terminated string. StreamGetStatus() should return the READY status
		to use this method.
	*/
	EXPORT_API bool PluginCoreStreamWatch(const char* streamId, unsigned long long timestamp);
	/*
		End watching Chroma RGB data stream. StreamGetStatus() should return the
		WATCHING status to use this method.
	*/
	EXPORT_API bool PluginCoreStreamWatchEnd();
	/*
		Direct access to low level API.
	*/
	EXPORT_API RZRESULT PluginCoreUnInit();
	/*
		Creates a `Chroma` animation at the given path. The `deviceType` parameter
		uses `EChromaSDKDeviceTypeEnum` as an integer. The `device` parameter uses
		`EChromaSDKDevice1DEnum` or `EChromaSDKDevice2DEnum` as an integer, respective
		to the `deviceType`. Returns the animation id upon success. Returns negative
		one upon failure. Saves a `Chroma` animation file with the `.chroma` extension
		at the given path. Returns the animation id upon success. Returns negative
		one upon failure.
	*/
	EXPORT_API int PluginCreateAnimation(const char* path, int deviceType, int device);
	/*
		Creates a `Chroma` animation in memory without creating a file. The `deviceType`
		parameter uses `EChromaSDKDeviceTypeEnum` as an integer. The `device` parameter
		uses `EChromaSDKDevice1DEnum` or `EChromaSDKDevice2DEnum` as an integer,
		respective to the `deviceType`. Returns the animation id upon success.
		Returns negative one upon failure. Returns the animation id upon success.
		Returns negative one upon failure.
	*/
	EXPORT_API int PluginCreateAnimationInMemory(int deviceType, int device);
	/*
		Create a device specific effect.
	*/
	EXPORT_API RZRESULT PluginCreateEffect(RZDEVICEID deviceId, ChromaSDK::EFFECT_TYPE effect, int* colors, int size, ChromaSDK::FChromaSDKGuid* effectId);
	/*
		Delete an effect given the effect id.
	*/
	EXPORT_API RZRESULT PluginDeleteEffect(const ChromaSDK::FChromaSDKGuid& effectId);
	/*
		Duplicate the first animation frame so that the animation length matches
		the frame count. Animation is referenced by id.
	*/
	EXPORT_API void PluginDuplicateFirstFrame(int animationId, int frameCount);
	/*
		Duplicate the first animation frame so that the animation length matches
		the frame count. Animation is referenced by name.
	*/
	EXPORT_API void PluginDuplicateFirstFrameName(const char* path, int frameCount);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginDuplicateFirstFrameNameD(const char* path, double frameCount);
	/*
		Duplicate all the frames of the animation to double the animation length.
		Frame 1 becomes frame 1 and 2. Frame 2 becomes frame 3 and 4. And so on.
		The animation is referenced by id.
	*/
	EXPORT_API void PluginDuplicateFrames(int animationId);
	/*
		Duplicate all the frames of the animation to double the animation length.
		Frame 1 becomes frame 1 and 2. Frame 2 becomes frame 3 and 4. And so on.
		The animation is referenced by name.
	*/
	EXPORT_API void PluginDuplicateFramesName(const char* path);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginDuplicateFramesNameD(const char* path);
	/*
		Duplicate all the animation frames in reverse so that the animation plays
		forwards and backwards. Animation is referenced by id.
	*/
	EXPORT_API void PluginDuplicateMirrorFrames(int animationId);
	/*
		Duplicate all the animation frames in reverse so that the animation plays
		forwards and backwards. Animation is referenced by name.
	*/
	EXPORT_API void PluginDuplicateMirrorFramesName(const char* path);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginDuplicateMirrorFramesNameD(const char* path);
	/*
		Fade the animation to black starting at the fade frame index to the end
		of the animation. Animation is referenced by id.
	*/
	EXPORT_API void PluginFadeEndFrames(int animationId, int fade);
	/*
		Fade the animation to black starting at the fade frame index to the end
		of the animation. Animation is referenced by name.
	*/
	EXPORT_API void PluginFadeEndFramesName(const char* path, int fade);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginFadeEndFramesNameD(const char* path, double fade);
	/*
		Fade the animation from black to full color starting at 0 to the fade frame
		index. Animation is referenced by id.
	*/
	EXPORT_API void PluginFadeStartFrames(int animationId, int fade);
	/*
		Fade the animation from black to full color starting at 0 to the fade frame
		index. Animation is referenced by name.
	*/
	EXPORT_API void PluginFadeStartFramesName(const char* path, int fade);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginFadeStartFramesNameD(const char* path, double fade);
	/*
		Set the RGB value for all colors in the specified frame. Animation is referenced
		by id.
	*/
	EXPORT_API void PluginFillColor(int animationId, int frameId, int color);
	/*
		Set the RGB value for all colors for all frames. Animation is referenced
		by id.
	*/
	EXPORT_API void PluginFillColorAllFrames(int animationId, int color);
	/*
		Set the RGB value for all colors for all frames. Animation is referenced
		by name.
	*/
	EXPORT_API void PluginFillColorAllFramesName(const char* path, int color);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginFillColorAllFramesNameD(const char* path, double color);
	/*
		Set the RGB value for all colors for all frames. Use the range of 0 to 255
		for red, green, and blue parameters. Animation is referenced by id.
	*/
	EXPORT_API void PluginFillColorAllFramesRGB(int animationId, int red, int green, int blue);
	/*
		Set the RGB value for all colors for all frames. Use the range of 0 to 255
		for red, green, and blue parameters. Animation is referenced by name.
	*/
	EXPORT_API void PluginFillColorAllFramesRGBName(const char* path, int red, int green, int blue);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginFillColorAllFramesRGBNameD(const char* path, double red, double green, double blue);
	/*
		Set the RGB value for all colors in the specified frame. Animation is referenced
		by name.
	*/
	EXPORT_API void PluginFillColorName(const char* path, int frameId, int color);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginFillColorNameD(const char* path, double frameId, double color);
	/*
		Set the RGB value for all colors in the specified frame. Animation is referenced
		by id.
	*/
	EXPORT_API void PluginFillColorRGB(int animationId, int frameId, int red, int green, int blue);
	/*
		Set the RGB value for all colors in the specified frame. Animation is referenced
		by name.
	*/
	EXPORT_API void PluginFillColorRGBName(const char* path, int frameId, int red, int green, int blue);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginFillColorRGBNameD(const char* path, double frameId, double red, double green, double blue);
	/*
		This method will only update colors in the animation that are not already
		set to black. Set the RGB value for a subset of colors in the specified
		frame. Animation is referenced by id.
	*/
	EXPORT_API void PluginFillNonZeroColor(int animationId, int frameId, int color);
	/*
		This method will only update colors in the animation that are not already
		set to black. Set the RGB value for a subset of colors for all frames.
		Animation is referenced by id.
	*/
	EXPORT_API void PluginFillNonZeroColorAllFrames(int animationId, int color);
	/*
		This method will only update colors in the animation that are not already
		set to black. Set the RGB value for a subset of colors for all frames.
		Animation is referenced by name.
	*/
	EXPORT_API void PluginFillNonZeroColorAllFramesName(const char* path, int color);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginFillNonZeroColorAllFramesNameD(const char* path, double color);
	/*
		This method will only update colors in the animation that are not already
		set to black. Set the RGB value for a subset of colors for all frames.
		Use the range of 0 to 255 for red, green, and blue parameters. Animation
		is referenced by id.
	*/
	EXPORT_API void PluginFillNonZeroColorAllFramesRGB(int animationId, int red, int green, int blue);
	/*
		This method will only update colors in the animation that are not already
		set to black. Set the RGB value for a subset of colors for all frames.
		Use the range of 0 to 255 for red, green, and blue parameters. Animation
		is referenced by name.
	*/
	EXPORT_API void PluginFillNonZeroColorAllFramesRGBName(const char* path, int red, int green, int blue);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginFillNonZeroColorAllFramesRGBNameD(const char* path, double red, double green, double blue);
	/*
		This method will only update colors in the animation that are not already
		set to black. Set the RGB value for a subset of colors in the specified
		frame. Animation is referenced by name.
	*/
	EXPORT_API void PluginFillNonZeroColorName(const char* path, int frameId, int color);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginFillNonZeroColorNameD(const char* path, double frameId, double color);
	/*
		This method will only update colors in the animation that are not already
		set to black. Set the RGB value for a subset of colors in the specified
		frame. Use the range of 0 to 255 for red, green, and blue parameters. Animation
		is referenced by id.
	*/
	EXPORT_API void PluginFillNonZeroColorRGB(int animationId, int frameId, int red, int green, int blue);
	/*
		This method will only update colors in the animation that are not already
		set to black. Set the RGB value for a subset of colors in the specified
		frame. Use the range of 0 to 255 for red, green, and blue parameters. Animation
		is referenced by name.
	*/
	EXPORT_API void PluginFillNonZeroColorRGBName(const char* path, int frameId, int red, int green, int blue);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginFillNonZeroColorRGBNameD(const char* path, double frameId, double red, double green, double blue);
	/*
		Fill the frame with random RGB values for the given frame. Animation is
		referenced by id.
	*/
	EXPORT_API void PluginFillRandomColors(int animationId, int frameId);
	/*
		Fill the frame with random RGB values for all frames. Animation is referenced
		by id.
	*/
	EXPORT_API void PluginFillRandomColorsAllFrames(int animationId);
	/*
		Fill the frame with random RGB values for all frames. Animation is referenced
		by name.
	*/
	EXPORT_API void PluginFillRandomColorsAllFramesName(const char* path);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginFillRandomColorsAllFramesNameD(const char* path);
	/*
		Fill the frame with random black and white values for the specified frame.
		Animation is referenced by id.
	*/
	EXPORT_API void PluginFillRandomColorsBlackAndWhite(int animationId, int frameId);
	/*
		Fill the frame with random black and white values for all frames. Animation
		is referenced by id.
	*/
	EXPORT_API void PluginFillRandomColorsBlackAndWhiteAllFrames(int animationId);
	/*
		Fill the frame with random black and white values for all frames. Animation
		is referenced by name.
	*/
	EXPORT_API void PluginFillRandomColorsBlackAndWhiteAllFramesName(const char* path);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginFillRandomColorsBlackAndWhiteAllFramesNameD(const char* path);
	/*
		Fill the frame with random black and white values for the specified frame.
		Animation is referenced by name.
	*/
	EXPORT_API void PluginFillRandomColorsBlackAndWhiteName(const char* path, int frameId);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginFillRandomColorsBlackAndWhiteNameD(const char* path, double frameId);
	/*
		Fill the frame with random RGB values for the given frame. Animation is
		referenced by name.
	*/
	EXPORT_API void PluginFillRandomColorsName(const char* path, int frameId);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginFillRandomColorsNameD(const char* path, double frameId);
	/*
		Fill the specified frame with RGB color where the animation color is less
		than the RGB threshold. Animation is referenced by id.
	*/
	EXPORT_API void PluginFillThresholdColors(int animationId, int frameId, int threshold, int color);
	/*
		Fill all frames with RGB color where the animation color is less than the
		RGB threshold. Animation is referenced by id.
	*/
	EXPORT_API void PluginFillThresholdColorsAllFrames(int animationId, int threshold, int color);
	/*
		Fill all frames with RGB color where the animation color is less than the
		RGB threshold. Animation is referenced by name.
	*/
	EXPORT_API void PluginFillThresholdColorsAllFramesName(const char* path, int threshold, int color);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginFillThresholdColorsAllFramesNameD(const char* path, double threshold, double color);
	/*
		Fill all frames with RGB color where the animation color is less than the
		threshold. Animation is referenced by id.
	*/
	EXPORT_API void PluginFillThresholdColorsAllFramesRGB(int animationId, int threshold, int red, int green, int blue);
	/*
		Fill all frames with RGB color where the animation color is less than the
		threshold. Animation is referenced by name.
	*/
	EXPORT_API void PluginFillThresholdColorsAllFramesRGBName(const char* path, int threshold, int red, int green, int blue);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginFillThresholdColorsAllFramesRGBNameD(const char* path, double threshold, double red, double green, double blue);
	/*
		Fill all frames with the min RGB color where the animation color is less
		than the min threshold AND with the max RGB color where the animation is
		more than the max threshold. Animation is referenced by id.
	*/
	EXPORT_API void PluginFillThresholdColorsMinMaxAllFramesRGB(int animationId, int minThreshold, int minRed, int minGreen, int minBlue, int maxThreshold, int maxRed, int maxGreen, int maxBlue);
	/*
		Fill all frames with the min RGB color where the animation color is less
		than the min threshold AND with the max RGB color where the animation is
		more than the max threshold. Animation is referenced by name.
	*/
	EXPORT_API void PluginFillThresholdColorsMinMaxAllFramesRGBName(const char* path, int minThreshold, int minRed, int minGreen, int minBlue, int maxThreshold, int maxRed, int maxGreen, int maxBlue);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginFillThresholdColorsMinMaxAllFramesRGBNameD(const char* path, double minThreshold, double minRed, double minGreen, double minBlue, double maxThreshold, double maxRed, double maxGreen, double maxBlue);
	/*
		Fill the specified frame with the min RGB color where the animation color
		is less than the min threshold AND with the max RGB color where the animation
		is more than the max threshold. Animation is referenced by id.
	*/
	EXPORT_API void PluginFillThresholdColorsMinMaxRGB(int animationId, int frameId, int minThreshold, int minRed, int minGreen, int minBlue, int maxThreshold, int maxRed, int maxGreen, int maxBlue);
	/*
		Fill the specified frame with the min RGB color where the animation color
		is less than the min threshold AND with the max RGB color where the animation
		is more than the max threshold. Animation is referenced by name.
	*/
	EXPORT_API void PluginFillThresholdColorsMinMaxRGBName(const char* path, int frameId, int minThreshold, int minRed, int minGreen, int minBlue, int maxThreshold, int maxRed, int maxGreen, int maxBlue);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginFillThresholdColorsMinMaxRGBNameD(const char* path, double frameId, double minThreshold, double minRed, double minGreen, double minBlue, double maxThreshold, double maxRed, double maxGreen, double maxBlue);
	/*
		Fill the specified frame with RGB color where the animation color is less
		than the RGB threshold. Animation is referenced by name.
	*/
	EXPORT_API void PluginFillThresholdColorsName(const char* path, int frameId, int threshold, int color);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginFillThresholdColorsNameD(const char* path, double frameId, double threshold, double color);
	/*
		Fill the specified frame with RGB color where the animation color is less
		than the RGB threshold. Animation is referenced by id.
	*/
	EXPORT_API void PluginFillThresholdColorsRGB(int animationId, int frameId, int threshold, int red, int green, int blue);
	/*
		Fill the specified frame with RGB color where the animation color is less
		than the RGB threshold. Animation is referenced by name.
	*/
	EXPORT_API void PluginFillThresholdColorsRGBName(const char* path, int frameId, int threshold, int red, int green, int blue);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginFillThresholdColorsRGBNameD(const char* path, double frameId, double threshold, double red, double green, double blue);
	/*
		Fill all frames with RGB color where the animation color is less than the
		RGB threshold. Animation is referenced by id.
	*/
	EXPORT_API void PluginFillThresholdRGBColorsAllFramesRGB(int animationId, int redThreshold, int greenThreshold, int blueThreshold, int red, int green, int blue);
	/*
		Fill all frames with RGB color where the animation color is less than the
		RGB threshold. Animation is referenced by name.
	*/
	EXPORT_API void PluginFillThresholdRGBColorsAllFramesRGBName(const char* path, int redThreshold, int greenThreshold, int blueThreshold, int red, int green, int blue);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginFillThresholdRGBColorsAllFramesRGBNameD(const char* path, double redThreshold, double greenThreshold, double blueThreshold, double red, double green, double blue);
	/*
		Fill the specified frame with RGB color where the animation color is less
		than the RGB threshold. Animation is referenced by id.
	*/
	EXPORT_API void PluginFillThresholdRGBColorsRGB(int animationId, int frameId, int redThreshold, int greenThreshold, int blueThreshold, int red, int green, int blue);
	/*
		Fill the specified frame with RGB color where the animation color is less
		than the RGB threshold. Animation is referenced by name.
	*/
	EXPORT_API void PluginFillThresholdRGBColorsRGBName(const char* path, int frameId, int redThreshold, int greenThreshold, int blueThreshold, int red, int green, int blue);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginFillThresholdRGBColorsRGBNameD(const char* path, double frameId, double redThreshold, double greenThreshold, double blueThreshold, double red, double green, double blue);
	/*
		Fill the specified frame with RGB color where the animation color is zero.
		Animation is referenced by id.
	*/
	EXPORT_API void PluginFillZeroColor(int animationId, int frameId, int color);
	/*
		Fill all frames with RGB color where the animation color is zero. Animation
		is referenced by id.
	*/
	EXPORT_API void PluginFillZeroColorAllFrames(int animationId, int color);
	/*
		Fill all frames with RGB color where the animation color is zero. Animation
		is referenced by name.
	*/
	EXPORT_API void PluginFillZeroColorAllFramesName(const char* path, int color);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginFillZeroColorAllFramesNameD(const char* path, double color);
	/*
		Fill all frames with RGB color where the animation color is zero. Animation
		is referenced by id.
	*/
	EXPORT_API void PluginFillZeroColorAllFramesRGB(int animationId, int red, int green, int blue);
	/*
		Fill all frames with RGB color where the animation color is zero. Animation
		is referenced by name.
	*/
	EXPORT_API void PluginFillZeroColorAllFramesRGBName(const char* path, int red, int green, int blue);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginFillZeroColorAllFramesRGBNameD(const char* path, double red, double green, double blue);
	/*
		Fill the specified frame with RGB color where the animation color is zero.
		Animation is referenced by name.
	*/
	EXPORT_API void PluginFillZeroColorName(const char* path, int frameId, int color);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginFillZeroColorNameD(const char* path, double frameId, double color);
	/*
		Fill the specified frame with RGB color where the animation color is zero.
		Animation is referenced by id.
	*/
	EXPORT_API void PluginFillZeroColorRGB(int animationId, int frameId, int red, int green, int blue);
	/*
		Fill the specified frame with RGB color where the animation color is zero.
		Animation is referenced by name.
	*/
	EXPORT_API void PluginFillZeroColorRGBName(const char* path, int frameId, int red, int green, int blue);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginFillZeroColorRGBNameD(const char* path, double frameId, double red, double green, double blue);
	/*
		Get the animation color for a frame given the `1D` `led`. The `led` should
		be greater than or equal to 0 and less than the `MaxLeds`. Animation is
		referenced by id.
	*/
	EXPORT_API int PluginGet1DColor(int animationId, int frameId, int led);
	/*
		Get the animation color for a frame given the `1D` `led`. The `led` should
		be greater than or equal to 0 and less than the `MaxLeds`. Animation is
		referenced by name.
	*/
	EXPORT_API int PluginGet1DColorName(const char* path, int frameId, int led);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginGet1DColorNameD(const char* path, double frameId, double led);
	/*
		Get the animation color for a frame given the `2D` `row` and `column`. The
		`row` should be greater than or equal to 0 and less than the `MaxRow`.
		The `column` should be greater than or equal to 0 and less than the `MaxColumn`.
		Animation is referenced by id.
	*/
	EXPORT_API int PluginGet2DColor(int animationId, int frameId, int row, int column);
	/*
		Get the animation color for a frame given the `2D` `row` and `column`. The
		`row` should be greater than or equal to 0 and less than the `MaxRow`.
		The `column` should be greater than or equal to 0 and less than the `MaxColumn`.
		Animation is referenced by name.
	*/
	EXPORT_API int PluginGet2DColorName(const char* path, int frameId, int row, int column);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginGet2DColorNameD(const char* path, double frameId, double row, double column);
	/*
		Get the animation id for the named animation.
	*/
	EXPORT_API int PluginGetAnimation(const char* name);
	/*
		`PluginGetAnimationCount` will return the number of loaded animations.
	*/
	EXPORT_API int PluginGetAnimationCount();
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginGetAnimationD(const char* name);
	/*
		`PluginGetAnimationId` will return the `animationId` given the `index` of
		the loaded animation. The `index` is zero-based and less than the number
		returned by `PluginGetAnimationCount`. Use `PluginGetAnimationName` to
		get the name of the animation.
	*/
	EXPORT_API int PluginGetAnimationId(int index);
	/*
		`PluginGetAnimationName` takes an `animationId` and returns the name of
		the animation of the `.chroma` animation file. If a name is not available
		then an empty string will be returned.
	*/
	EXPORT_API const char* PluginGetAnimationName(int animationId);
	/*
		Get the current frame of the animation referenced by id.
	*/
	EXPORT_API int PluginGetCurrentFrame(int animationId);
	/*
		Get the current frame of the animation referenced by name.
	*/
	EXPORT_API int PluginGetCurrentFrameName(const char* path);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginGetCurrentFrameNameD(const char* path);
	/*
		Returns the `EChromaSDKDevice1DEnum` or `EChromaSDKDevice2DEnum` of a `Chroma`
		animation respective to the `deviceType`, as an integer upon success. Returns
		negative one upon failure.
	*/
	EXPORT_API int PluginGetDevice(int animationId);
	/*
		Returns the `EChromaSDKDevice1DEnum` or `EChromaSDKDevice2DEnum` of a `Chroma`
		animation respective to the `deviceType`, as an integer upon success. Returns
		negative one upon failure.
	*/
	EXPORT_API int PluginGetDeviceName(const char* path);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginGetDeviceNameD(const char* path);
	/*
		Returns the `EChromaSDKDeviceTypeEnum` of a `Chroma` animation as an integer
		upon success. Returns negative one upon failure.
	*/
	EXPORT_API int PluginGetDeviceType(int animationId);
	/*
		Returns the `EChromaSDKDeviceTypeEnum` of a `Chroma` animation as an integer
		upon success. Returns negative one upon failure.
	*/
	EXPORT_API int PluginGetDeviceTypeName(const char* path);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginGetDeviceTypeNameD(const char* path);
	/*
		Get the frame colors and duration (in seconds) for a `Chroma` animation
		referenced by id. The `color` is expected to be an array of the expected
		dimensions for the `deviceType/device`. The `length` parameter is the size
		of the `color` array. For `EChromaSDKDevice1DEnum` the array size should
		be `MAX LEDS`. For `EChromaSDKDevice2DEnum` the array size should be `MAX
		ROW` times `MAX COLUMN`. Keys are populated only for EChromaSDKDevice2DEnum::DE_Keyboard
		and EChromaSDKDevice2DEnum::DE_KeyboardExtended. Keys will only use the
		EChromaSDKDevice2DEnum::DE_Keyboard `MAX_ROW` times `MAX_COLUMN` keysLength.
		Returns the animation id upon success. Returns negative one upon failure.
	*/
	EXPORT_API int PluginGetFrame(int animationId, int frameId, float* duration, int* colors, int length, int* keys, int keysLength);
	/*
		Returns the frame count of a `Chroma` animation upon success. Returns negative
		one upon failure.
	*/
	EXPORT_API int PluginGetFrameCount(int animationId);
	/*
		Returns the frame count of a `Chroma` animation upon success. Returns negative
		one upon failure.
	*/
	EXPORT_API int PluginGetFrameCountName(const char* path);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginGetFrameCountNameD(const char* path);
	/*
		Returns the duration of an animation frame in seconds upon success. Returns
		zero upon failure.
	*/
	EXPORT_API float PluginGetFrameDuration(int animationId, int frameId);
	/*
		Returns the duration of an animation frame in seconds upon success. Returns
		zero upon failure.
	*/
	EXPORT_API float PluginGetFrameDurationName(const char* path, int frameId);
	/*
		Get the frame colors and duration (in seconds) for a `Chroma` animation
		referenced by name. The `color` is expected to be an array of the expected
		dimensions for the `deviceType/device`. The `length` parameter is the size
		of the `color` array. For `EChromaSDKDevice1DEnum` the array size should
		be `MAX LEDS`. For `EChromaSDKDevice2DEnum` the array size should be `MAX
		ROW` times `MAX COLUMN`. Keys are populated only for EChromaSDKDevice2DEnum::DE_Keyboard
		and EChromaSDKDevice2DEnum::DE_KeyboardExtended. Keys will only use the
		EChromaSDKDevice2DEnum::DE_Keyboard `MAX_ROW` times `MAX_COLUMN` keysLength.
		Returns the animation id upon success. Returns negative one upon failure.
	*/
	EXPORT_API int PluginGetFrameName(const char* path, int frameId, float* duration, int* colors, int length, int* keys, int keysLength);
	/*
		Get the color of an animation key for the given frame referenced by id.
	*/
	EXPORT_API int PluginGetKeyColor(int animationId, int frameId, int rzkey);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginGetKeyColorD(const char* path, double frameId, double rzkey);
	/*
		Get the color of an animation key for the given frame referenced by name.
	*/
	EXPORT_API int PluginGetKeyColorName(const char* path, int frameId, int rzkey);
	/*
		Returns `RZRESULT_SUCCESS` if the plugin has been initialized successfully.
		Returns `RZRESULT_DLL_NOT_FOUND` if core Chroma library is not found. Returns
		`RZRESULT_DLL_INVALID_SIGNATURE` if core Chroma library has an invalid
		signature.
	*/
	EXPORT_API RZRESULT PluginGetLibraryLoadedState();
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginGetLibraryLoadedStateD();
	/*
		Returns the `MAX COLUMN` given the `EChromaSDKDevice2DEnum` device as an
		integer upon success. Returns negative one upon failure.
	*/
	EXPORT_API int PluginGetMaxColumn(int device);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginGetMaxColumnD(double device);
	/*
		Returns the MAX LEDS given the `EChromaSDKDevice1DEnum` device as an integer
		upon success. Returns negative one upon failure.
	*/
	EXPORT_API int PluginGetMaxLeds(int device);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginGetMaxLedsD(double device);
	/*
		Returns the `MAX ROW` given the `EChromaSDKDevice2DEnum` device as an integer
		upon success. Returns negative one upon failure.
	*/
	EXPORT_API int PluginGetMaxRow(int device);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginGetMaxRowD(double device);
	/*
		`PluginGetPlayingAnimationCount` will return the number of playing animations.
	*/
	EXPORT_API int PluginGetPlayingAnimationCount();
	/*
		`PluginGetPlayingAnimationId` will return the `animationId` given the `index`
		of the playing animation. The `index` is zero-based and less than the number
		returned by `PluginGetPlayingAnimationCount`. Use `PluginGetAnimationName`
		to get the name of the animation.
	*/
	EXPORT_API int PluginGetPlayingAnimationId(int index);
	/*
		Get the RGB color given red, green, and blue.
	*/
	EXPORT_API int PluginGetRGB(int red, int green, int blue);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginGetRGBD(double red, double green, double blue);
	/*
		Returns the total duration of an animation in seconds upon success. Returns
		zero upon failure.
	*/
	EXPORT_API float PluginGetTotalDuration(int animationId);
	/*
		Returns the total duration of an animation in seconds upon success. Returns
		zero upon failure.
	*/
	EXPORT_API float PluginGetTotalDurationName(const char* path);
	/*
		Check if the animation has loop enabled referenced by id.
	*/
	EXPORT_API bool PluginHasAnimationLoop(int animationId);
	/*
		Check if the animation has loop enabled referenced by name.
	*/
	EXPORT_API bool PluginHasAnimationLoopName(const char* path);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginHasAnimationLoopNameD(const char* path);
	/*
		Initialize the ChromaSDK. Zero indicates success, otherwise failure. Many
		API methods auto initialize the ChromaSDK if not already initialized.
	*/
	EXPORT_API RZRESULT PluginInit();
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginInitD();
	/*
		Initialize the ChromaSDK. AppInfo populates the details in Synapse. Zero
		indicates success, otherwise failure. Many API methods auto initialize
		the ChromaSDK if not already initialized.
	*/
	EXPORT_API RZRESULT PluginInitSDK(ChromaSDK::APPINFOTYPE* AppInfo);
	/*
		Insert an animation delay by duplicating the frame by the delay number of
		times. Animation is referenced by id.
	*/
	EXPORT_API void PluginInsertDelay(int animationId, int frameId, int delay);
	/*
		Insert an animation delay by duplicating the frame by the delay number of
		times. Animation is referenced by name.
	*/
	EXPORT_API void PluginInsertDelayName(const char* path, int frameId, int delay);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginInsertDelayNameD(const char* path, double frameId, double delay);
	/*
		Duplicate the source frame index at the target frame index. Animation is
		referenced by id.
	*/
	EXPORT_API void PluginInsertFrame(int animationId, int sourceFrame, int targetFrame);
	/*
		Duplicate the source frame index at the target frame index. Animation is
		referenced by name.
	*/
	EXPORT_API void PluginInsertFrameName(const char* path, int sourceFrame, int targetFrame);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginInsertFrameNameD(const char* path, double sourceFrame, double targetFrame);
	/*
		Invert all the colors at the specified frame. Animation is referenced by
		id.
	*/
	EXPORT_API void PluginInvertColors(int animationId, int frameId);
	/*
		Invert all the colors for all frames. Animation is referenced by id.
	*/
	EXPORT_API void PluginInvertColorsAllFrames(int animationId);
	/*
		Invert all the colors for all frames. Animation is referenced by name.
	*/
	EXPORT_API void PluginInvertColorsAllFramesName(const char* path);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginInvertColorsAllFramesNameD(const char* path);
	/*
		Invert all the colors at the specified frame. Animation is referenced by
		name.
	*/
	EXPORT_API void PluginInvertColorsName(const char* path, int frameId);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginInvertColorsNameD(const char* path, double frameId);
	/*
		Check if the animation is paused referenced by id.
	*/
	EXPORT_API bool PluginIsAnimationPaused(int animationId);
	/*
		Check if the animation is paused referenced by name.
	*/
	EXPORT_API bool PluginIsAnimationPausedName(const char* path);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginIsAnimationPausedNameD(const char* path);
	/*
		The editor dialog is a non-blocking modal window, this method returns true
		if the modal window is open, otherwise false.
	*/
	EXPORT_API bool PluginIsDialogOpen();
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginIsDialogOpenD();
	/*
		Returns true if the plugin has been initialized. Returns false if the plugin
		is uninitialized.
	*/
	EXPORT_API bool PluginIsInitialized();
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginIsInitializedD();
	/*
		If the method can be invoked the method returns true.
	*/
	EXPORT_API bool PluginIsPlatformSupported();
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginIsPlatformSupportedD();
	/*
		`PluginIsPlayingName` automatically handles initializing the `ChromaSDK`.
		The named `.chroma` animation file will be automatically opened. The method
		will return whether the animation is playing or not. Animation is referenced
		by id.
	*/
	EXPORT_API bool PluginIsPlaying(int animationId);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginIsPlayingD(double animationId);
	/*
		`PluginIsPlayingName` automatically handles initializing the `ChromaSDK`.
		The named `.chroma` animation file will be automatically opened. The method
		will return whether the animation is playing or not. Animation is referenced
		by name.
	*/
	EXPORT_API bool PluginIsPlayingName(const char* path);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginIsPlayingNameD(const char* path);
	/*
		`PluginIsPlayingType` automatically handles initializing the `ChromaSDK`.
		If any animation is playing for the `deviceType` and `device` combination,
		the method will return true, otherwise false.
	*/
	EXPORT_API bool PluginIsPlayingType(int deviceType, int device);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginIsPlayingTypeD(double deviceType, double device);
	/*
		Do a lerp math operation on a float.
	*/
	EXPORT_API float PluginLerp(float start, float end, float amt);
	/*
		Lerp from one color to another given t in the range 0.0 to 1.0.
	*/
	EXPORT_API int PluginLerpColor(int from, int to, float t);
	/*
		Loads `Chroma` effects so that the animation can be played immediately.
		Returns the animation id upon success. Returns negative one upon failure.
	*/
	EXPORT_API int PluginLoadAnimation(int animationId);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginLoadAnimationD(double animationId);
	/*
		Load the named animation.
	*/
	EXPORT_API void PluginLoadAnimationName(const char* path);
	/*
		Load a composite set of animations.
	*/
	EXPORT_API void PluginLoadComposite(const char* name);
	/*
		Make a blank animation for the length of the frame count. Frame duration
		defaults to the duration. The frame color defaults to color. Animation
		is referenced by id.
	*/
	EXPORT_API void PluginMakeBlankFrames(int animationId, int frameCount, float duration, int color);
	/*
		Make a blank animation for the length of the frame count. Frame duration
		defaults to the duration. The frame color defaults to color. Animation
		is referenced by name.
	*/
	EXPORT_API void PluginMakeBlankFramesName(const char* path, int frameCount, float duration, int color);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginMakeBlankFramesNameD(const char* path, double frameCount, double duration, double color);
	/*
		Make a blank animation for the length of the frame count. Frame duration
		defaults to the duration. The frame color is random. Animation is referenced
		by id.
	*/
	EXPORT_API void PluginMakeBlankFramesRandom(int animationId, int frameCount, float duration);
	/*
		Make a blank animation for the length of the frame count. Frame duration
		defaults to the duration. The frame color is random black and white. Animation
		is referenced by id.
	*/
	EXPORT_API void PluginMakeBlankFramesRandomBlackAndWhite(int animationId, int frameCount, float duration);
	/*
		Make a blank animation for the length of the frame count. Frame duration
		defaults to the duration. The frame color is random black and white. Animation
		is referenced by name.
	*/
	EXPORT_API void PluginMakeBlankFramesRandomBlackAndWhiteName(const char* path, int frameCount, float duration);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginMakeBlankFramesRandomBlackAndWhiteNameD(const char* path, double frameCount, double duration);
	/*
		Make a blank animation for the length of the frame count. Frame duration
		defaults to the duration. The frame color is random. Animation is referenced
		by name.
	*/
	EXPORT_API void PluginMakeBlankFramesRandomName(const char* path, int frameCount, float duration);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginMakeBlankFramesRandomNameD(const char* path, double frameCount, double duration);
	/*
		Make a blank animation for the length of the frame count. Frame duration
		defaults to the duration. The frame color defaults to color. Animation
		is referenced by id.
	*/
	EXPORT_API void PluginMakeBlankFramesRGB(int animationId, int frameCount, float duration, int red, int green, int blue);
	/*
		Make a blank animation for the length of the frame count. Frame duration
		defaults to the duration. The frame color defaults to color. Animation
		is referenced by name.
	*/
	EXPORT_API void PluginMakeBlankFramesRGBName(const char* path, int frameCount, float duration, int red, int green, int blue);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginMakeBlankFramesRGBNameD(const char* path, double frameCount, double duration, double red, double green, double blue);
	/*
		Flips the color grid horizontally for all `Chroma` animation frames. Returns
		the animation id upon success. Returns negative one upon failure.
	*/
	EXPORT_API int PluginMirrorHorizontally(int animationId);
	/*
		Flips the color grid vertically for all `Chroma` animation frames. This
		method has no effect for `EChromaSDKDevice1DEnum` devices. Returns the
		animation id upon success. Returns negative one upon failure.
	*/
	EXPORT_API int PluginMirrorVertically(int animationId);
	/*
		Multiply the color intensity with the lerp result from color 1 to color
		2 using the frame index divided by the frame count for the `t` parameter.
		Animation is referenced in id.
	*/
	EXPORT_API void PluginMultiplyColorLerpAllFrames(int animationId, int color1, int color2);
	/*
		Multiply the color intensity with the lerp result from color 1 to color
		2 using the frame index divided by the frame count for the `t` parameter.
		Animation is referenced in name.
	*/
	EXPORT_API void PluginMultiplyColorLerpAllFramesName(const char* path, int color1, int color2);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginMultiplyColorLerpAllFramesNameD(const char* path, double color1, double color2);
	/*
		Multiply all the colors in the frame by the intensity value. The valid the
		intensity range is from 0.0 to 255.0. RGB components are multiplied equally.
		An intensity of 0.5 would half the color value. Black colors in the frame
		will not be affected by this method.
	*/
	EXPORT_API void PluginMultiplyIntensity(int animationId, int frameId, float intensity);
	/*
		Multiply all the colors for all frames by the intensity value. The valid
		the intensity range is from 0.0 to 255.0. RGB components are multiplied
		equally. An intensity of 0.5 would half the color value. Black colors in
		the frame will not be affected by this method.
	*/
	EXPORT_API void PluginMultiplyIntensityAllFrames(int animationId, float intensity);
	/*
		Multiply all the colors for all frames by the intensity value. The valid
		the intensity range is from 0.0 to 255.0. RGB components are multiplied
		equally. An intensity of 0.5 would half the color value. Black colors in
		the frame will not be affected by this method.
	*/
	EXPORT_API void PluginMultiplyIntensityAllFramesName(const char* path, float intensity);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginMultiplyIntensityAllFramesNameD(const char* path, double intensity);
	/*
		Multiply all frames by the RBG color intensity. Animation is referenced
		by id.
	*/
	EXPORT_API void PluginMultiplyIntensityAllFramesRGB(int animationId, int red, int green, int blue);
	/*
		Multiply all frames by the RBG color intensity. Animation is referenced
		by name.
	*/
	EXPORT_API void PluginMultiplyIntensityAllFramesRGBName(const char* path, int red, int green, int blue);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginMultiplyIntensityAllFramesRGBNameD(const char* path, double red, double green, double blue);
	/*
		Multiply the specific frame by the RBG color intensity. Animation is referenced
		by id.
	*/
	EXPORT_API void PluginMultiplyIntensityColor(int animationId, int frameId, int color);
	/*
		Multiply all frames by the RBG color intensity. Animation is referenced
		by id.
	*/
	EXPORT_API void PluginMultiplyIntensityColorAllFrames(int animationId, int color);
	/*
		Multiply all frames by the RBG color intensity. Animation is referenced
		by name.
	*/
	EXPORT_API void PluginMultiplyIntensityColorAllFramesName(const char* path, int color);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginMultiplyIntensityColorAllFramesNameD(const char* path, double color);
	/*
		Multiply the specific frame by the RBG color intensity. Animation is referenced
		by name.
	*/
	EXPORT_API void PluginMultiplyIntensityColorName(const char* path, int frameId, int color);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginMultiplyIntensityColorNameD(const char* path, double frameId, double color);
	/*
		Multiply all the colors in the frame by the intensity value. The valid the
		intensity range is from 0.0 to 255.0. RGB components are multiplied equally.
		An intensity of 0.5 would half the color value. Black colors in the frame
		will not be affected by this method.
	*/
	EXPORT_API void PluginMultiplyIntensityName(const char* path, int frameId, float intensity);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginMultiplyIntensityNameD(const char* path, double frameId, double intensity);
	/*
		Multiply the specific frame by the RBG color intensity. Animation is referenced
		by id.
	*/
	EXPORT_API void PluginMultiplyIntensityRGB(int animationId, int frameId, int red, int green, int blue);
	/*
		Multiply the specific frame by the RBG color intensity. Animation is referenced
		by name.
	*/
	EXPORT_API void PluginMultiplyIntensityRGBName(const char* path, int frameId, int red, int green, int blue);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginMultiplyIntensityRGBNameD(const char* path, double frameId, double red, double green, double blue);
	/*
		Multiply the specific frame by the color lerp result between color 1 and
		2 using the frame color value as the `t` value. Animation is referenced
		by id.
	*/
	EXPORT_API void PluginMultiplyNonZeroTargetColorLerp(int animationId, int frameId, int color1, int color2);
	/*
		Multiply all frames by the color lerp result between color 1 and 2 using
		the frame color value as the `t` value. Animation is referenced by id.
	*/
	EXPORT_API void PluginMultiplyNonZeroTargetColorLerpAllFrames(int animationId, int color1, int color2);
	/*
		Multiply all frames by the color lerp result between color 1 and 2 using
		the frame color value as the `t` value. Animation is referenced by name.
	*/
	EXPORT_API void PluginMultiplyNonZeroTargetColorLerpAllFramesName(const char* path, int color1, int color2);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginMultiplyNonZeroTargetColorLerpAllFramesNameD(const char* path, double color1, double color2);
	/*
		Multiply the specific frame by the color lerp result between RGB 1 and 2
		using the frame color value as the `t` value. Animation is referenced by
		id.
	*/
	EXPORT_API void PluginMultiplyNonZeroTargetColorLerpAllFramesRGB(int animationId, int red1, int green1, int blue1, int red2, int green2, int blue2);
	/*
		Multiply the specific frame by the color lerp result between RGB 1 and 2
		using the frame color value as the `t` value. Animation is referenced by
		name.
	*/
	EXPORT_API void PluginMultiplyNonZeroTargetColorLerpAllFramesRGBName(const char* path, int red1, int green1, int blue1, int red2, int green2, int blue2);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginMultiplyNonZeroTargetColorLerpAllFramesRGBNameD(const char* path, double red1, double green1, double blue1, double red2, double green2, double blue2);
	/*
		Multiply the specific frame by the color lerp result between color 1 and
		2 using the frame color value as the `t` value. Animation is referenced
		by id.
	*/
	EXPORT_API void PluginMultiplyTargetColorLerp(int animationId, int frameId, int color1, int color2);
	/*
		Multiply all frames by the color lerp result between color 1 and 2 using
		the frame color value as the `t` value. Animation is referenced by id.
	*/
	EXPORT_API void PluginMultiplyTargetColorLerpAllFrames(int animationId, int color1, int color2);
	/*
		Multiply all frames by the color lerp result between color 1 and 2 using
		the frame color value as the `t` value. Animation is referenced by name.
	*/
	EXPORT_API void PluginMultiplyTargetColorLerpAllFramesName(const char* path, int color1, int color2);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginMultiplyTargetColorLerpAllFramesNameD(const char* path, double color1, double color2);
	/*
		Multiply all frames by the color lerp result between RGB 1 and 2 using the
		frame color value as the `t` value. Animation is referenced by id.
	*/
	EXPORT_API void PluginMultiplyTargetColorLerpAllFramesRGB(int animationId, int red1, int green1, int blue1, int red2, int green2, int blue2);
	/*
		Multiply all frames by the color lerp result between RGB 1 and 2 using the
		frame color value as the `t` value. Animation is referenced by name.
	*/
	EXPORT_API void PluginMultiplyTargetColorLerpAllFramesRGBName(const char* path, int red1, int green1, int blue1, int red2, int green2, int blue2);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginMultiplyTargetColorLerpAllFramesRGBNameD(const char* path, double red1, double green1, double blue1, double red2, double green2, double blue2);
	/*
		Multiply the specific frame by the color lerp result between color 1 and
		2 using the frame color value as the `t` value. Animation is referenced
		by name.
	*/
	EXPORT_API void PluginMultiplyTargetColorLerpName(const char* path, int frameId, int color1, int color2);
	/*
		Offset all colors in the frame using the RGB offset. Use the range of -255
		to 255 for red, green, and blue parameters. Negative values remove color.
		Positive values add color.
	*/
	EXPORT_API void PluginOffsetColors(int animationId, int frameId, int red, int green, int blue);
	/*
		Offset all colors for all frames using the RGB offset. Use the range of
		-255 to 255 for red, green, and blue parameters. Negative values remove
		color. Positive values add color.
	*/
	EXPORT_API void PluginOffsetColorsAllFrames(int animationId, int red, int green, int blue);
	/*
		Offset all colors for all frames using the RGB offset. Use the range of
		-255 to 255 for red, green, and blue parameters. Negative values remove
		color. Positive values add color.
	*/
	EXPORT_API void PluginOffsetColorsAllFramesName(const char* path, int red, int green, int blue);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginOffsetColorsAllFramesNameD(const char* path, double red, double green, double blue);
	/*
		Offset all colors in the frame using the RGB offset. Use the range of -255
		to 255 for red, green, and blue parameters. Negative values remove color.
		Positive values add color.
	*/
	EXPORT_API void PluginOffsetColorsName(const char* path, int frameId, int red, int green, int blue);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginOffsetColorsNameD(const char* path, double frameId, double red, double green, double blue);
	/*
		This method will only update colors in the animation that are not already
		set to black. Offset a subset of colors in the frame using the RGB offset.
		Use the range of -255 to 255 for red, green, and blue parameters. Negative
		values remove color. Positive values add color.
	*/
	EXPORT_API void PluginOffsetNonZeroColors(int animationId, int frameId, int red, int green, int blue);
	/*
		This method will only update colors in the animation that are not already
		set to black. Offset a subset of colors for all frames using the RGB offset.
		Use the range of -255 to 255 for red, green, and blue parameters. Negative
		values remove color. Positive values add color.
	*/
	EXPORT_API void PluginOffsetNonZeroColorsAllFrames(int animationId, int red, int green, int blue);
	/*
		This method will only update colors in the animation that are not already
		set to black. Offset a subset of colors for all frames using the RGB offset.
		Use the range of -255 to 255 for red, green, and blue parameters. Negative
		values remove color. Positive values add color.
	*/
	EXPORT_API void PluginOffsetNonZeroColorsAllFramesName(const char* path, int red, int green, int blue);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginOffsetNonZeroColorsAllFramesNameD(const char* path, double red, double green, double blue);
	/*
		This method will only update colors in the animation that are not already
		set to black. Offset a subset of colors in the frame using the RGB offset.
		Use the range of -255 to 255 for red, green, and blue parameters. Negative
		values remove color. Positive values add color.
	*/
	EXPORT_API void PluginOffsetNonZeroColorsName(const char* path, int frameId, int red, int green, int blue);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginOffsetNonZeroColorsNameD(const char* path, double frameId, double red, double green, double blue);
	/*
		Opens a `Chroma` animation file so that it can be played. Returns an animation
		id >= 0 upon success. Returns negative one if there was a failure. The
		animation id is used in most of the API methods.
	*/
	EXPORT_API int PluginOpenAnimation(const char* path);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginOpenAnimationD(const char* path);
	/*
		Opens a `Chroma` animation data from memory so that it can be played. `Data`
		is a pointer to BYTE array of the loaded animation in memory. `Name` will
		be assigned to the animation when loaded. Returns an animation id >= 0
		upon success. Returns negative one if there was a failure. The animation
		id is used in most of the API methods.
	*/
	EXPORT_API int PluginOpenAnimationFromMemory(const BYTE* data, const char* name);
	/*
		Opens a `Chroma` animation file with the `.chroma` extension. Returns zero
		upon success. Returns negative one if there was a failure.
	*/
	EXPORT_API int PluginOpenEditorDialog(const char* path);
	/*
		Open the named animation in the editor dialog and play the animation at
		start.
	*/
	EXPORT_API int PluginOpenEditorDialogAndPlay(const char* path);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginOpenEditorDialogAndPlayD(const char* path);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginOpenEditorDialogD(const char* path);
	/*
		Sets the `duration` for all grames in the `Chroma` animation to the `duration`
		parameter. Returns the animation id upon success. Returns negative one
		upon failure.
	*/
	EXPORT_API int PluginOverrideFrameDuration(int animationId, float duration);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginOverrideFrameDurationD(double animationId, double duration);
	/*
		Override the duration of all frames with the `duration` value. Animation
		is referenced by name.
	*/
	EXPORT_API void PluginOverrideFrameDurationName(const char* path, float duration);
	/*
		Pause the current animation referenced by id.
	*/
	EXPORT_API void PluginPauseAnimation(int animationId);
	/*
		Pause the current animation referenced by name.
	*/
	EXPORT_API void PluginPauseAnimationName(const char* path);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginPauseAnimationNameD(const char* path);
	/*
		Plays the `Chroma` animation. This will load the animation, if not loaded
		previously. Returns the animation id upon success. Returns negative one
		upon failure.
	*/
	EXPORT_API int PluginPlayAnimation(int animationId);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginPlayAnimationD(double animationId);
	/*
		`PluginPlayAnimationFrame` automatically handles initializing the `ChromaSDK`.
		The method will play the animation given the `animationId` with looping
		`on` or `off` starting at the `frameId`.
	*/
	EXPORT_API void PluginPlayAnimationFrame(int animationId, int frameId, bool loop);
	/*
		`PluginPlayAnimationFrameName` automatically handles initializing the `ChromaSDK`.
		The named `.chroma` animation file will be automatically opened. The animation
		will play with looping `on` or `off` starting at the `frameId`.
	*/
	EXPORT_API void PluginPlayAnimationFrameName(const char* path, int frameId, bool loop);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginPlayAnimationFrameNameD(const char* path, double frameId, double loop);
	/*
		`PluginPlayAnimationLoop` automatically handles initializing the `ChromaSDK`.
		The method will play the animation given the `animationId` with looping
		`on` or `off`.
	*/
	EXPORT_API void PluginPlayAnimationLoop(int animationId, bool loop);
	/*
		`PluginPlayAnimationName` automatically handles initializing the `ChromaSDK`.
		The named `.chroma` animation file will be automatically opened. The animation
		will play with looping `on` or `off`.
	*/
	EXPORT_API void PluginPlayAnimationName(const char* path, bool loop);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginPlayAnimationNameD(const char* path, double loop);
	/*
		`PluginPlayComposite` automatically handles initializing the `ChromaSDK`.
		The named animation files for the `.chroma` set will be automatically opened.
		The set of animations will play with looping `on` or `off`.
	*/
	EXPORT_API void PluginPlayComposite(const char* name, bool loop);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginPlayCompositeD(const char* name, double loop);
	/*
		Displays the `Chroma` animation frame on `Chroma` hardware given the `frameId`.
		Returns the animation id upon success. Returns negative one upon failure.
	*/
	EXPORT_API int PluginPreviewFrame(int animationId, int frameId);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginPreviewFrameD(double animationId, double frameId);
	/*
		Displays the `Chroma` animation frame on `Chroma` hardware given the `frameId`.
		Animaton is referenced by name.
	*/
	EXPORT_API void PluginPreviewFrameName(const char* path, int frameId);
	/*
		Reduce the frames of the animation by removing every nth element. Animation
		is referenced by id.
	*/
	EXPORT_API void PluginReduceFrames(int animationId, int n);
	/*
		Reduce the frames of the animation by removing every nth element. Animation
		is referenced by name.
	*/
	EXPORT_API void PluginReduceFramesName(const char* path, int n);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginReduceFramesNameD(const char* path, double n);
	/*
		Resets the `Chroma` animation to 1 blank frame. Returns the animation id
		upon success. Returns negative one upon failure.
	*/
	EXPORT_API int PluginResetAnimation(int animationId);
	/*
		Resume the animation with loop `ON` or `OFF` referenced by id.
	*/
	EXPORT_API void PluginResumeAnimation(int animationId, bool loop);
	/*
		Resume the animation with loop `ON` or `OFF` referenced by name.
	*/
	EXPORT_API void PluginResumeAnimationName(const char* path, bool loop);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginResumeAnimationNameD(const char* path, double loop);
	/*
		Reverse the animation frame order of the `Chroma` animation. Returns the
		animation id upon success. Returns negative one upon failure. Animation
		is referenced by id.
	*/
	EXPORT_API int PluginReverse(int animationId);
	/*
		Reverse the animation frame order of the `Chroma` animation. Animation is
		referenced by id.
	*/
	EXPORT_API void PluginReverseAllFrames(int animationId);
	/*
		Reverse the animation frame order of the `Chroma` animation. Animation is
		referenced by name.
	*/
	EXPORT_API void PluginReverseAllFramesName(const char* path);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginReverseAllFramesNameD(const char* path);
	/*
		Save the animation referenced by id to the path specified.
	*/
	EXPORT_API int PluginSaveAnimation(int animationId, const char* path);
	/*
		Save the named animation to the target path specified.
	*/
	EXPORT_API int PluginSaveAnimationName(const char* sourceAnimation, const char* targetAnimation);
	/*
		Set the animation color for a frame given the `1D` `led`. The `led` should
		be greater than or equal to 0 and less than the `MaxLeds`. The animation
		is referenced by id.
	*/
	EXPORT_API void PluginSet1DColor(int animationId, int frameId, int led, int color);
	/*
		Set the animation color for a frame given the `1D` `led`. The `led` should
		be greater than or equal to 0 and less than the `MaxLeds`. The animation
		is referenced by name.
	*/
	EXPORT_API void PluginSet1DColorName(const char* path, int frameId, int led, int color);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginSet1DColorNameD(const char* path, double frameId, double led, double color);
	/*
		Set the animation color for a frame given the `2D` `row` and `column`. The
		`row` should be greater than or equal to 0 and less than the `MaxRow`.
		The `column` should be greater than or equal to 0 and less than the `MaxColumn`.
		The animation is referenced by id.
	*/
	EXPORT_API void PluginSet2DColor(int animationId, int frameId, int row, int column, int color);
	/*
		Set the animation color for a frame given the `2D` `row` and `column`. The
		`row` should be greater than or equal to 0 and less than the `MaxRow`.
		The `column` should be greater than or equal to 0 and less than the `MaxColumn`.
		The animation is referenced by name.
	*/
	EXPORT_API void PluginSet2DColorName(const char* path, int frameId, int row, int column, int color);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginSet2DColorNameD(const char* path, double frameId, double rowColumnIndex, double color);
	/*
		When custom color is set, the custom key mode will be used. The animation
		is referenced by id.
	*/
	EXPORT_API void PluginSetChromaCustomColorAllFrames(int animationId);
	/*
		When custom color is set, the custom key mode will be used. The animation
		is referenced by name.
	*/
	EXPORT_API void PluginSetChromaCustomColorAllFramesName(const char* path);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginSetChromaCustomColorAllFramesNameD(const char* path);
	/*
		Set the Chroma custom key color flag on all frames. `True` changes the layout
		from grid to key. `True` changes the layout from key to grid. Animation
		is referenced by id.
	*/
	EXPORT_API void PluginSetChromaCustomFlag(int animationId, bool flag);
	/*
		Set the Chroma custom key color flag on all frames. `True` changes the layout
		from grid to key. `True` changes the layout from key to grid. Animation
		is referenced by name.
	*/
	EXPORT_API void PluginSetChromaCustomFlagName(const char* path, bool flag);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginSetChromaCustomFlagNameD(const char* path, double flag);
	/*
		Set the current frame of the animation referenced by id.
	*/
	EXPORT_API void PluginSetCurrentFrame(int animationId, int frameId);
	/*
		Set the current frame of the animation referenced by name.
	*/
	EXPORT_API void PluginSetCurrentFrameName(const char* path, int frameId);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginSetCurrentFrameNameD(const char* path, double frameId);
	/*
		Set the custom alpha flag on the color array
	*/
	EXPORT_API RZRESULT PluginSetCustomColorFlag2D(int device, int* colors);
	/*
		Changes the `deviceType` and `device` of a `Chroma` animation. If the device
		is changed, the `Chroma` animation will be reset with 1 blank frame. Returns
		the animation id upon success. Returns negative one upon failure.
	*/
	EXPORT_API int PluginSetDevice(int animationId, int deviceType, int device);
	/*
		SetEffect will display the referenced effect id.
	*/
	EXPORT_API RZRESULT PluginSetEffect(const ChromaSDK::FChromaSDKGuid& effectId);
	/*
		SetEffectCustom1D will display the referenced colors immediately
	*/
	EXPORT_API RZRESULT PluginSetEffectCustom1D(const int device, const int* colors);
	/*
		SetEffectCustom2D will display the referenced colors immediately.
	*/
	EXPORT_API RZRESULT PluginSetEffectCustom2D(const int device, const int* colors);
	/*
		SetEffectKeyboardCustom2D will display the referenced custom keyboard colors
		immediately. Colors represent a visual grid layout. Keys represent the
		hotkeys for any layout.
	*/
	EXPORT_API RZRESULT PluginSetEffectKeyboardCustom2D(const int device, const int* colors, const int* keys);
	/*
		When the idle animation is used, the named animation will play when no other
		animations are playing. Reference the animation by id.
	*/
	EXPORT_API void PluginSetIdleAnimation(int animationId);
	/*
		When the idle animation is used, the named animation will play when no other
		animations are playing. Reference the animation by name.
	*/
	EXPORT_API void PluginSetIdleAnimationName(const char* path);
	/*
		Set animation key to a static color for the given frame.
	*/
	EXPORT_API void PluginSetKeyColor(int animationId, int frameId, int rzkey, int color);
	/*
		Set the key to the specified key color for all frames. Animation is referenced
		by id.
	*/
	EXPORT_API void PluginSetKeyColorAllFrames(int animationId, int rzkey, int color);
	/*
		Set the key to the specified key color for all frames. Animation is referenced
		by name.
	*/
	EXPORT_API void PluginSetKeyColorAllFramesName(const char* path, int rzkey, int color);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginSetKeyColorAllFramesNameD(const char* path, double rzkey, double color);
	/*
		Set the key to the specified key color for all frames. Animation is referenced
		by id.
	*/
	EXPORT_API void PluginSetKeyColorAllFramesRGB(int animationId, int rzkey, int red, int green, int blue);
	/*
		Set the key to the specified key color for all frames. Animation is referenced
		by name.
	*/
	EXPORT_API void PluginSetKeyColorAllFramesRGBName(const char* path, int rzkey, int red, int green, int blue);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginSetKeyColorAllFramesRGBNameD(const char* path, double rzkey, double red, double green, double blue);
	/*
		Set animation key to a static color for the given frame.
	*/
	EXPORT_API void PluginSetKeyColorName(const char* path, int frameId, int rzkey, int color);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginSetKeyColorNameD(const char* path, double frameId, double rzkey, double color);
	/*
		Set the key to the specified key color for the specified frame. Animation
		is referenced by id.
	*/
	EXPORT_API void PluginSetKeyColorRGB(int animationId, int frameId, int rzkey, int red, int green, int blue);
	/*
		Set the key to the specified key color for the specified frame. Animation
		is referenced by name.
	*/
	EXPORT_API void PluginSetKeyColorRGBName(const char* path, int frameId, int rzkey, int red, int green, int blue);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginSetKeyColorRGBNameD(const char* path, double frameId, double rzkey, double red, double green, double blue);
	/*
		Set animation key to a static color for the given frame if the existing
		color is not already black.
	*/
	EXPORT_API void PluginSetKeyNonZeroColor(int animationId, int frameId, int rzkey, int color);
	/*
		Set animation key to a static color for the given frame if the existing
		color is not already black.
	*/
	EXPORT_API void PluginSetKeyNonZeroColorName(const char* path, int frameId, int rzkey, int color);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginSetKeyNonZeroColorNameD(const char* path, double frameId, double rzkey, double color);
	/*
		Set the key to the specified key color for the specified frame where color
		is not black. Animation is referenced by id.
	*/
	EXPORT_API void PluginSetKeyNonZeroColorRGB(int animationId, int frameId, int rzkey, int red, int green, int blue);
	/*
		Set the key to the specified key color for the specified frame where color
		is not black. Animation is referenced by name.
	*/
	EXPORT_API void PluginSetKeyNonZeroColorRGBName(const char* path, int frameId, int rzkey, int red, int green, int blue);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginSetKeyNonZeroColorRGBNameD(const char* path, double frameId, double rzkey, double red, double green, double blue);
	/*
		Set animation key by row and column to a static color for the given frame.
	*/
	EXPORT_API void PluginSetKeyRowColumnColorName(const char* path, int frameId, int row, int column, int color);
	/*
		Set an array of animation keys to a static color for the given frame. Animation
		is referenced by id.
	*/
	EXPORT_API void PluginSetKeysColor(int animationId, int frameId, const int* rzkeys, int keyCount, int color);
	/*
		Set an array of animation keys to a static color for all frames. Animation
		is referenced by id.
	*/
	EXPORT_API void PluginSetKeysColorAllFrames(int animationId, const int* rzkeys, int keyCount, int color);
	/*
		Set an array of animation keys to a static color for all frames. Animation
		is referenced by name.
	*/
	EXPORT_API void PluginSetKeysColorAllFramesName(const char* path, const int* rzkeys, int keyCount, int color);
	/*
		Set an array of animation keys to a static color for all frames. Animation
		is referenced by id.
	*/
	EXPORT_API void PluginSetKeysColorAllFramesRGB(int animationId, const int* rzkeys, int keyCount, int red, int green, int blue);
	/*
		Set an array of animation keys to a static color for all frames. Animation
		is referenced by name.
	*/
	EXPORT_API void PluginSetKeysColorAllFramesRGBName(const char* path, const int* rzkeys, int keyCount, int red, int green, int blue);
	/*
		Set an array of animation keys to a static color for the given frame.
	*/
	EXPORT_API void PluginSetKeysColorName(const char* path, int frameId, const int* rzkeys, int keyCount, int color);
	/*
		Set an array of animation keys to a static color for the given frame. Animation
		is referenced by id.
	*/
	EXPORT_API void PluginSetKeysColorRGB(int animationId, int frameId, const int* rzkeys, int keyCount, int red, int green, int blue);
	/*
		Set an array of animation keys to a static color for the given frame. Animation
		is referenced by name.
	*/
	EXPORT_API void PluginSetKeysColorRGBName(const char* path, int frameId, const int* rzkeys, int keyCount, int red, int green, int blue);
	/*
		Set an array of animation keys to a static color for the given frame if
		the existing color is not already black.
	*/
	EXPORT_API void PluginSetKeysNonZeroColor(int animationId, int frameId, const int* rzkeys, int keyCount, int color);
	/*
		Set an array of animation keys to a static color for the given frame where
		the color is not black. Animation is referenced by id.
	*/
	EXPORT_API void PluginSetKeysNonZeroColorAllFrames(int animationId, const int* rzkeys, int keyCount, int color);
	/*
		Set an array of animation keys to a static color for all frames if the existing
		color is not already black. Reference animation by name.
	*/
	EXPORT_API void PluginSetKeysNonZeroColorAllFramesName(const char* path, const int* rzkeys, int keyCount, int color);
	/*
		Set an array of animation keys to a static color for the given frame if
		the existing color is not already black. Reference animation by name.
	*/
	EXPORT_API void PluginSetKeysNonZeroColorName(const char* path, int frameId, const int* rzkeys, int keyCount, int color);
	/*
		Set an array of animation keys to a static color for the given frame where
		the color is not black. Animation is referenced by id.
	*/
	EXPORT_API void PluginSetKeysNonZeroColorRGB(int animationId, int frameId, const int* rzkeys, int keyCount, int red, int green, int blue);
	/*
		Set an array of animation keys to a static color for the given frame where
		the color is not black. Animation is referenced by name.
	*/
	EXPORT_API void PluginSetKeysNonZeroColorRGBName(const char* path, int frameId, const int* rzkeys, int keyCount, int red, int green, int blue);
	/*
		Set an array of animation keys to a static color for the given frame where
		the color is black. Animation is referenced by id.
	*/
	EXPORT_API void PluginSetKeysZeroColor(int animationId, int frameId, const int* rzkeys, int keyCount, int color);
	/*
		Set an array of animation keys to a static color for all frames where the
		color is black. Animation is referenced by id.
	*/
	EXPORT_API void PluginSetKeysZeroColorAllFrames(int animationId, const int* rzkeys, int keyCount, int color);
	/*
		Set an array of animation keys to a static color for all frames where the
		color is black. Animation is referenced by name.
	*/
	EXPORT_API void PluginSetKeysZeroColorAllFramesName(const char* path, const int* rzkeys, int keyCount, int color);
	/*
		Set an array of animation keys to a static color for all frames where the
		color is black. Animation is referenced by id.
	*/
	EXPORT_API void PluginSetKeysZeroColorAllFramesRGB(int animationId, const int* rzkeys, int keyCount, int red, int green, int blue);
	/*
		Set an array of animation keys to a static color for all frames where the
		color is black. Animation is referenced by name.
	*/
	EXPORT_API void PluginSetKeysZeroColorAllFramesRGBName(const char* path, const int* rzkeys, int keyCount, int red, int green, int blue);
	/*
		Set an array of animation keys to a static color for the given frame where
		the color is black. Animation is referenced by name.
	*/
	EXPORT_API void PluginSetKeysZeroColorName(const char* path, int frameId, const int* rzkeys, int keyCount, int color);
	/*
		Set an array of animation keys to a static color for the given frame where
		the color is black. Animation is referenced by id.
	*/
	EXPORT_API void PluginSetKeysZeroColorRGB(int animationId, int frameId, const int* rzkeys, int keyCount, int red, int green, int blue);
	/*
		Set an array of animation keys to a static color for the given frame where
		the color is black. Animation is referenced by name.
	*/
	EXPORT_API void PluginSetKeysZeroColorRGBName(const char* path, int frameId, const int* rzkeys, int keyCount, int red, int green, int blue);
	/*
		Set animation key to a static color for the given frame where the color
		is black. Animation is referenced by id.
	*/
	EXPORT_API void PluginSetKeyZeroColor(int animationId, int frameId, int rzkey, int color);
	/*
		Set animation key to a static color for the given frame where the color
		is black. Animation is referenced by name.
	*/
	EXPORT_API void PluginSetKeyZeroColorName(const char* path, int frameId, int rzkey, int color);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginSetKeyZeroColorNameD(const char* path, double frameId, double rzkey, double color);
	/*
		Set animation key to a static color for the given frame where the color
		is black. Animation is referenced by id.
	*/
	EXPORT_API void PluginSetKeyZeroColorRGB(int animationId, int frameId, int rzkey, int red, int green, int blue);
	/*
		Set animation key to a static color for the given frame where the color
		is black. Animation is referenced by name.
	*/
	EXPORT_API void PluginSetKeyZeroColorRGBName(const char* path, int frameId, int rzkey, int red, int green, int blue);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginSetKeyZeroColorRGBNameD(const char* path, double frameId, double rzkey, double red, double green, double blue);
	/*
		Invokes the setup for a debug logging callback so that `stdout` is redirected
		to the callback. This is used by `Unity` so that debug messages can appear
		in the console window.
	*/
	EXPORT_API void PluginSetLogDelegate(DebugLogPtr fp);
	/*
		Sets the target device to the static color.
	*/
	EXPORT_API void PluginSetStaticColor(int deviceType, int device, int color);
	/*
		Sets all devices to the static color.
	*/
	EXPORT_API void PluginSetStaticColorAll(int color);
	/*
		Sets the target device to the static color.
	*/
	EXPORT_API void PluginStaticColor(int deviceType, int device, int color);
	/*
		Sets all devices to the static color.
	*/
	EXPORT_API void PluginStaticColorAll(int color);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginStaticColorD(double deviceType, double device, double color);
	/*
		`PluginStopAll` will automatically stop all animations that are playing.
	*/
	EXPORT_API void PluginStopAll();
	/*
		Stops animation playback if in progress. Returns the animation id upon success.
		Returns negative one upon failure.
	*/
	EXPORT_API int PluginStopAnimation(int animationId);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginStopAnimationD(double animationId);
	/*
		`PluginStopAnimationName` automatically handles initializing the `ChromaSDK`.
		The named `.chroma` animation file will be automatically opened. The animation
		will stop if playing.
	*/
	EXPORT_API void PluginStopAnimationName(const char* path);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginStopAnimationNameD(const char* path);
	/*
		`PluginStopAnimationType` automatically handles initializing the `ChromaSDK`.
		If any animation is playing for the `deviceType` and `device` combination,
		it will be stopped.
	*/
	EXPORT_API void PluginStopAnimationType(int deviceType, int device);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginStopAnimationTypeD(double deviceType, double device);
	/*
		`PluginStopComposite` automatically handles initializing the `ChromaSDK`.
		The named animation files for the `.chroma` set will be automatically opened.
		The set of animations will be stopped if playing.
	*/
	EXPORT_API void PluginStopComposite(const char* name);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginStopCompositeD(const char* name);
	/*
		Return color1 - color2
	*/
	EXPORT_API int PluginSubtractColor(const int color1, const int color2);
	/*
		Subtract the source color from the target color for the frame where the
		target color is not black. Source and target are referenced by id.
	*/
	EXPORT_API void PluginSubtractNonZeroAllKeys(int sourceAnimationId, int targetAnimationId, int frameId);
	/*
		Subtract the source color from the target color for all frames where the
		target color is not black. Source and target are referenced by id.
	*/
	EXPORT_API void PluginSubtractNonZeroAllKeysAllFrames(int sourceAnimationId, int targetAnimationId);
	/*
		Subtract the source color from the target color for all frames where the
		target color is not black. Source and target are referenced by name.
	*/
	EXPORT_API void PluginSubtractNonZeroAllKeysAllFramesName(const char* sourceAnimation, const char* targetAnimation);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginSubtractNonZeroAllKeysAllFramesNameD(const char* sourceAnimation, const char* targetAnimation);
	/*
		Subtract the source color from the target color for all frames where the
		target color is not black starting at offset for the length of the source.
		Source and target are referenced by id.
	*/
	EXPORT_API void PluginSubtractNonZeroAllKeysAllFramesOffset(int sourceAnimationId, int targetAnimationId, int offset);
	/*
		Subtract the source color from the target color for all frames where the
		target color is not black starting at offset for the length of the source.
		Source and target are referenced by name.
	*/
	EXPORT_API void PluginSubtractNonZeroAllKeysAllFramesOffsetName(const char* sourceAnimation, const char* targetAnimation, int offset);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginSubtractNonZeroAllKeysAllFramesOffsetNameD(const char* sourceAnimation, const char* targetAnimation, double offset);
	/*
		Subtract the source color from the target color for the frame where the
		target color is not black. Source and target are referenced by name.
	*/
	EXPORT_API void PluginSubtractNonZeroAllKeysName(const char* sourceAnimation, const char* targetAnimation, int frameId);
	/*
		Subtract the source color from the target where color is not black for the
		source frame and target offset frame, reference source and target by id.
	*/
	EXPORT_API void PluginSubtractNonZeroAllKeysOffset(int sourceAnimationId, int targetAnimationId, int frameId, int offset);
	/*
		Subtract the source color from the target where color is not black for the
		source frame and target offset frame, reference source and target by name.
	*/
	EXPORT_API void PluginSubtractNonZeroAllKeysOffsetName(const char* sourceAnimation, const char* targetAnimation, int frameId, int offset);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginSubtractNonZeroAllKeysOffsetNameD(const char* sourceAnimation, const char* targetAnimation, double frameId, double offset);
	/*
		Subtract the source color from the target color where the target color is
		not black for all frames. Reference source and target by id.
	*/
	EXPORT_API void PluginSubtractNonZeroTargetAllKeysAllFrames(int sourceAnimationId, int targetAnimationId);
	/*
		Subtract the source color from the target color where the target color is
		not black for all frames. Reference source and target by name.
	*/
	EXPORT_API void PluginSubtractNonZeroTargetAllKeysAllFramesName(const char* sourceAnimation, const char* targetAnimation);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginSubtractNonZeroTargetAllKeysAllFramesNameD(const char* sourceAnimation, const char* targetAnimation);
	/*
		Subtract the source color from the target color where the target color is
		not black for all frames starting at the target offset for the length of
		the source. Reference source and target by id.
	*/
	EXPORT_API void PluginSubtractNonZeroTargetAllKeysAllFramesOffset(int sourceAnimationId, int targetAnimationId, int offset);
	/*
		Subtract the source color from the target color where the target color is
		not black for all frames starting at the target offset for the length of
		the source. Reference source and target by name.
	*/
	EXPORT_API void PluginSubtractNonZeroTargetAllKeysAllFramesOffsetName(const char* sourceAnimation, const char* targetAnimation, int offset);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginSubtractNonZeroTargetAllKeysAllFramesOffsetNameD(const char* sourceAnimation, const char* targetAnimation, double offset);
	/*
		Subtract the source color from the target color where the target color is
		not black from the source frame to the target offset frame. Reference source
		and target by id.
	*/
	EXPORT_API void PluginSubtractNonZeroTargetAllKeysOffset(int sourceAnimationId, int targetAnimationId, int frameId, int offset);
	/*
		Subtract the source color from the target color where the target color is
		not black from the source frame to the target offset frame. Reference source
		and target by name.
	*/
	EXPORT_API void PluginSubtractNonZeroTargetAllKeysOffsetName(const char* sourceAnimation, const char* targetAnimation, int frameId, int offset);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginSubtractNonZeroTargetAllKeysOffsetNameD(const char* sourceAnimation, const char* targetAnimation, double frameId, double offset);
	/*
		Subtract all frames with the min RGB color where the animation color is
		less than the min threshold AND with the max RGB color where the animation
		is more than the max threshold. Animation is referenced by id.
	*/
	EXPORT_API void PluginSubtractThresholdColorsMinMaxAllFramesRGB(const int animationId, const int minThreshold, const int minRed, const int minGreen, const int minBlue, const int maxThreshold, const int maxRed, const int maxGreen, const int maxBlue);
	/*
		Subtract all frames with the min RGB color where the animation color is
		less than the min threshold AND with the max RGB color where the animation
		is more than the max threshold. Animation is referenced by name.
	*/
	EXPORT_API void PluginSubtractThresholdColorsMinMaxAllFramesRGBName(const char* path, const int minThreshold, const int minRed, const int minGreen, const int minBlue, const int maxThreshold, const int maxRed, const int maxGreen, const int maxBlue);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginSubtractThresholdColorsMinMaxAllFramesRGBNameD(const char* path, double minThreshold, double minRed, double minGreen, double minBlue, double maxThreshold, double maxRed, double maxGreen, double maxBlue);
	/*
		Subtract the specified frame with the min RGB color where the animation
		color is less than the min threshold AND with the max RGB color where the
		animation is more than the max threshold. Animation is referenced by id.
	*/
	EXPORT_API void PluginSubtractThresholdColorsMinMaxRGB(const int animationId, const int frameId, const int minThreshold, const int minRed, const int minGreen, const int minBlue, const int maxThreshold, const int maxRed, const int maxGreen, const int maxBlue);
	/*
		Subtract the specified frame with the min RGB color where the animation
		color is less than the min threshold AND with the max RGB color where the
		animation is more than the max threshold. Animation is referenced by name.
	*/
	EXPORT_API void PluginSubtractThresholdColorsMinMaxRGBName(const char* path, const int frameId, const int minThreshold, const int minRed, const int minGreen, const int minBlue, const int maxThreshold, const int maxRed, const int maxGreen, const int maxBlue);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginSubtractThresholdColorsMinMaxRGBNameD(const char* path, const int frameId, const int minThreshold, const int minRed, const int minGreen, const int minBlue, const int maxThreshold, const int maxRed, const int maxGreen, const int maxBlue);
	/*
		Trim the end of the animation. The length of the animation will be the lastFrameId
		plus one. Reference the animation by id.
	*/
	EXPORT_API void PluginTrimEndFrames(int animationId, int lastFrameId);
	/*
		Trim the end of the animation. The length of the animation will be the lastFrameId
		plus one. Reference the animation by name.
	*/
	EXPORT_API void PluginTrimEndFramesName(const char* path, int lastFrameId);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginTrimEndFramesNameD(const char* path, double lastFrameId);
	/*
		Remove the frame from the animation. Reference animation by id.
	*/
	EXPORT_API void PluginTrimFrame(int animationId, int frameId);
	/*
		Remove the frame from the animation. Reference animation by name.
	*/
	EXPORT_API void PluginTrimFrameName(const char* path, int frameId);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginTrimFrameNameD(const char* path, double frameId);
	/*
		Trim the start of the animation starting at frame 0 for the number of frames.
		Reference the animation by id.
	*/
	EXPORT_API void PluginTrimStartFrames(int animationId, int numberOfFrames);
	/*
		Trim the start of the animation starting at frame 0 for the number of frames.
		Reference the animation by name.
	*/
	EXPORT_API void PluginTrimStartFramesName(const char* path, int numberOfFrames);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginTrimStartFramesNameD(const char* path, double numberOfFrames);
	/*
		Uninitializes the `ChromaSDK`. Returns 0 upon success. Returns negative
		one upon failure.
	*/
	EXPORT_API RZRESULT PluginUninit();
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginUninitD();
	/*
		Unloads `Chroma` effects to free up resources. Returns the animation id
		upon success. Returns negative one upon failure. Reference the animation
		by id.
	*/
	EXPORT_API int PluginUnloadAnimation(int animationId);
	/*
		D suffix for limited data types.
	*/
	EXPORT_API double PluginUnloadAnimationD(double animationId);
	/*
		Unload the animation effects. Reference the animation by name.
	*/
	EXPORT_API void PluginUnloadAnimationName(const char* path);
	/*
		Unload the the composite set of animation effects. Reference the animation
		by name.
	*/
	EXPORT_API void PluginUnloadComposite(const char* name);
	/*
		Unload the Razer Chroma SDK Library before exiting the application.
	*/
	EXPORT_API void PluginUnloadLibrarySDK();
	/*
		Unload the Razer Chroma Streaming Plugin Library before exiting the application.
	*/
	EXPORT_API void PluginUnloadLibraryStreamingPlugin();
	/*
		Updates the `frameId` of the `Chroma` animation referenced by id and
		sets the `duration` (in seconds). The `color` is expected to be an array
		of the dimensions for the `deviceType/device`. The `length` parameter is
		the size of the `color` array. For `EChromaSDKDevice1DEnum` the array size
		should be `MAX LEDS`. For `EChromaSDKDevice2DEnum` the array size should
		be `MAX ROW` times `MAX COLUMN`. Keys are populated only for EChromaSDKDevice2DEnum::DE_Keyboard
		and EChromaSDKDevice2DEnum::DE_KeyboardExtended. Keys will only use the
		EChromaSDKDevice2DEnum::DE_Keyboard `MAX_ROW` times `MAX_COLUMN` keysLength.
	*/
	EXPORT_API int PluginUpdateFrame(int animationId, int frameId, float duration, int* colors, int length, int* keys, int keysLength);
	/*
		Update the `frameId` of the `Chroma` animation referenced by name and
		sets the `duration` (in seconds). The `color` is expected to be an array
		of the dimensions for the `deviceType/device`. The `length` parameter is
		the size of the `color` array. For `EChromaSDKDevice1DEnum` the array size
		should be `MAX LEDS`. For `EChromaSDKDevice2DEnum` the array size should
		be `MAX ROW` times `MAX COLUMN`. Keys are populated only for EChromaSDKDevice2DEnum::DE_Keyboard
		and EChromaSDKDevice2DEnum::DE_KeyboardExtended. Keys will only use the
		EChromaSDKDevice2DEnum::DE_Keyboard `MAX_ROW` times `MAX_COLUMN` keysLength.
		Returns the animation id upon success. Returns negative one upon failure.
	*/
	EXPORT_API int PluginUpdateFrameName(const char* path, int frameId, float duration, int* colors, int length, int* keys, int keysLength);
	/*
		On by default, `UseForwardChromaEvents` sends the animation name to `CoreSetEventName`
		automatically when `PlayAnimationName` is called.
	*/
	EXPORT_API void PluginUseForwardChromaEvents(bool flag);
	/*
		When the idle animation flag is true, when no other animations are playing,
		the idle animation will be used. The idle animation will not be affected
		by the API calls to PluginIsPlaying, PluginStopAnimationType, PluginGetPlayingAnimationId,
		and PluginGetPlayingAnimationCount. Then the idle animation flag is false,
		the idle animation is disabled. `Device` uses `EChromaSDKDeviceEnum` enums.
	*/
	EXPORT_API void PluginUseIdleAnimation(int device, bool flag);
	/*
		Set idle animation flag for all devices.
	*/
	EXPORT_API void PluginUseIdleAnimations(bool flag);
	/*
		Set preloading animation flag, which is set to true by default. Reference
		animation by id.
	*/
	EXPORT_API void PluginUsePreloading(int animationId, bool flag);
	/*
		Set preloading animation flag, which is set to true by default. Reference
		animation by name.
	*/
	EXPORT_API void PluginUsePreloadingName(const char* path, bool flag);
#pragma endregion

	
}
